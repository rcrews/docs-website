{
  "swagger" : "2.0",
  "info" : { },
  "tags" : [ {
    "name" : "Brokers metadata operations"
  }, {
    "name" : "Cluster metadata operations"
  }, {
    "name" : "Consumer group related details."
  }, {
    "name" : "Resource configuration operations"
  }, {
    "name" : "Search related operations"
  }, {
    "name" : "Topic metadata related operations"
  }, {
    "name" : "Topic consumption operations"
  }, {
    "name" : "Aggregated metric operations"
  }, {
    "name" : "Broker metrics operations"
  }, {
    "name" : "Consumer metric operations."
  }, {
    "name" : "Producer metrics operations"
  }, {
    "name" : "Topic metrics operations"
  }, {
    "name" : "v1"
  }, {
    "name" : "Schema registry operations"
  }, {
    "name" : "Serdes related operations"
  }, {
    "name" : "Application context related operations"
  } ],
  "schemes" : [ "http" ],
  "paths" : {
    "/api/v1/admin/brokers/{brokerId}" : {
      "get" : {
        "tags" : [ "Brokers metadata operations" ],
        "summary" : "Returns broker node in the cluster with the given broker Id.",
        "description" : "",
        "operationId" : "getBroker",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "brokerId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BrokerNode"
            }
          }
        }
      }
    },
    "/api/v1/admin/brokers" : {
      "get" : {
        "tags" : [ "Brokers metadata operations" ],
        "summary" : "Returns all broker nodes in the cluster with the given brokerIds if they exist.",
        "description" : "",
        "operationId" : "getAllBrokers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "brokerIds",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BrokerNode"
            }
          }
        }
      }
    },
    "/api/v1/admin/cluster" : {
      "get" : {
        "tags" : [ "Cluster metadata operations" ],
        "summary" : "Get the kafka cluster details to which this service is connected to.",
        "description" : "",
        "operationId" : "getClusterDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/KafkaClusterInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/consumers/groupNames" : {
      "get" : {
        "tags" : [ "Consumer group related details." ],
        "summary" : "Get all consumer group names.",
        "description" : "",
        "operationId" : "getConsumerGroupNames",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/api/v1/admin/consumers/groups" : {
      "get" : {
        "tags" : [ "Consumer group related details." ],
        "summary" : "Get all consumer group details.",
        "description" : "",
        "operationId" : "getConsumerGroups",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "state",
          "in" : "query",
          "description" : "State of the Producer",
          "required" : false,
          "type" : "string",
          "enum" : [ "active", "inactive", "all" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ConsumerGroupInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/consumers/groups/{groupName}" : {
      "get" : {
        "tags" : [ "Consumer group related details." ],
        "summary" : "Get consumer group details for the given groupName `groupName`.",
        "description" : "",
        "operationId" : "getConsumerGroupInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupName",
          "in" : "path",
          "description" : "Name of the consumer group",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ConsumerGroupInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/consumers/clients" : {
      "get" : {
        "tags" : [ "Consumer group related details." ],
        "summary" : "Get consumer group details for all clients.",
        "description" : "",
        "operationId" : "getAllConsumerInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ConsumerInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/consumers/clients/{clientId}" : {
      "get" : {
        "tags" : [ "Consumer group related details." ],
        "summary" : "Get consumer group details for a given clientId.",
        "description" : "",
        "operationId" : "getConsumerInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "clientId",
          "in" : "path",
          "description" : "Consumer client identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ConsumerInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/configs/topics/{topicName}" : {
      "get" : {
        "tags" : [ "Resource configuration operations" ],
        "summary" : "Get kafka configurations for a topic with given topicName.",
        "description" : "",
        "operationId" : "allTopicConfigs",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/KafkaResourceConfig"
            }
          }
        }
      }
    },
    "/api/v1/admin/configs/topics" : {
      "get" : {
        "tags" : [ "Resource configuration operations" ],
        "summary" : "Get kafka configurations for all topics.",
        "description" : "",
        "operationId" : "allTopicConfigs",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/KafkaResourceConfig"
            }
          }
        }
      }
    },
    "/api/v1/admin/configs/brokers" : {
      "get" : {
        "tags" : [ "Resource configuration operations" ],
        "summary" : "Get kafka configurations for the given brokerIds. if brokerIds parameter does not have any value then configuration for all brokers is returned.",
        "description" : "",
        "operationId" : "getBrokerDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/KafkaResourceConfig"
            }
          }
        }
      }
    },
    "/api/v1/admin/configs/brokers/{brokerId}" : {
      "get" : {
        "tags" : [ "Resource configuration operations" ],
        "summary" : "Get kafka configurations for the given brokerId.",
        "description" : "",
        "operationId" : "getBrokerDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "brokerId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/KafkaResourceConfig"
            }
          }
        }
      }
    },
    "/api/v1/admin/search/topics" : {
      "get" : {
        "tags" : [ "Search related operations" ],
        "summary" : "Get respective details for given topicNames.",
        "description" : "",
        "operationId" : "getTopicDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicNames",
          "in" : "query",
          "description" : "Comma separated topic names",
          "required" : false,
          "type" : "string",
          "x-example" : "topic1, topic2"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TopicInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/search/topicPartitions" : {
      "get" : {
        "tags" : [ "Search related operations" ],
        "summary" : "Get a list of topic partitions with respective details for the given collection of topicPartitions which exist in target Kafka cluster.",
        "description" : "",
        "operationId" : "getTopicPartitionInfos",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "partitions",
          "in" : "query",
          "description" : "Comma separated topic partition values",
          "required" : false,
          "type" : "string",
          "x-example" : "events-1, events-2, events-9"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TopicPartitionInfos"
            }
          }
        }
      }
    },
    "/api/v1/admin/search/configs/topics" : {
      "get" : {
        "tags" : [ "Search related operations" ],
        "summary" : "Get kafka configurations at topic level for given topicNames",
        "description" : "",
        "operationId" : "getTopicConfigs",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicNames",
          "in" : "query",
          "description" : "Comma separated topic names",
          "required" : false,
          "type" : "string",
          "x-example" : "topic1, topic2"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/KafkaResourceConfig"
            }
          }
        }
      }
    },
    "/api/v1/admin/search/configs/brokers" : {
      "get" : {
        "tags" : [ "Search related operations" ],
        "summary" : "Get kafka configurations for the given brokerIds.",
        "description" : "",
        "operationId" : "getBrokerConfigs",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "brokerIds",
          "in" : "query",
          "description" : "Comma separated broker identifiers",
          "required" : false,
          "type" : "string",
          "x-example" : "1001, 1002"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/KafkaResourceConfig"
            }
          }
        }
      }
    },
    "/api/v1/admin/search/brokers" : {
      "get" : {
        "tags" : [ "Search related operations" ],
        "summary" : "Returns broker nodes in the cluster with the given brokerIds if they exist.",
        "description" : "",
        "operationId" : "getBrokers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "brokerIds",
          "in" : "query",
          "description" : "Comma separated broker identifiers",
          "required" : false,
          "type" : "string",
          "x-example" : "1001, 1002"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BrokerNode"
            }
          }
        }
      }
    },
    "/api/v1/admin/topics" : {
      "get" : {
        "tags" : [ "Topic metadata related operations" ],
        "summary" : "Get respective details for all the topics. ",
        "description" : "",
        "operationId" : "allTopicInfos",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TopicInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/topics/{topicName}" : {
      "get" : {
        "tags" : [ "Topic metadata related operations" ],
        "summary" : "Get respective details about topic with the given `topicName`",
        "description" : "",
        "operationId" : "getTopicInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TopicInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/topics/{topicName}/partitions" : {
      "get" : {
        "tags" : [ "Topic metadata related operations" ],
        "summary" : "Get respective partitions for the given topic with topicName",
        "description" : "",
        "operationId" : "getTopicPartitions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TopicPartitionInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/topics/{topicName}/partition/{partitionId}/payloads" : {
      "get" : {
        "tags" : [ "Topic consumption operations" ],
        "summary" : "Get topic content for a given topic, its partition and the offset range with in the partition",
        "description" : "",
        "operationId" : "getTopicContent",
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "partitionId",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "startOffset",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endOffset",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "keyDeserializer",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "valueDeserializer",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "responseWaitTimeInMs",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TopicContent"
            }
          }
        }
      }
    },
    "/api/v1/admin/topics/{topicName}/offsets" : {
      "get" : {
        "tags" : [ "Topic consumption operations" ],
        "summary" : "Get offsets for all the partition for a given kafka topic name",
        "description" : "",
        "operationId" : "getTopicOffsets",
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TopicOffsetInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/aggregated/topics/{topicName}" : {
      "get" : {
        "tags" : [ "Aggregated metric operations" ],
        "summary" : "Get topic metrics for the given topic",
        "description" : "",
        "operationId" : "getTopicMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "description" : "Name of the topic",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State of the Producer",
          "required" : false,
          "type" : "string",
          "enum" : [ "active", "inactive", "all" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AggrTopicMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/aggregated/brokers/{brokerId}" : {
      "get" : {
        "tags" : [ "Aggregated metric operations" ],
        "summary" : "Get broker details with metrics for a given brokerId",
        "description" : "",
        "operationId" : "getBrokerDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "brokerId",
          "in" : "path",
          "description" : "Broker id",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BrokerDetails"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/aggregated/producers" : {
      "get" : {
        "tags" : [ "Aggregated metric operations" ],
        "summary" : "Get producer metrics for all the alive producers",
        "description" : "",
        "operationId" : "getAllProducerMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State of the Producer",
          "required" : false,
          "type" : "string",
          "enum" : [ "active", "inactive", "all" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AggrProducerMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/aggregated/producers/{producerClientId}" : {
      "get" : {
        "tags" : [ "Aggregated metric operations" ],
        "summary" : "Get producer metrics for the given producerClientId",
        "description" : "",
        "operationId" : "getProducerMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "producerClientId",
          "in" : "path",
          "description" : "Producer client identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AggrProducerMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/aggregated/topics" : {
      "get" : {
        "tags" : [ "Aggregated metric operations" ],
        "summary" : "Get cluster with topic metrics",
        "description" : "",
        "operationId" : "getClusterWithTopicMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State of the Producer",
          "required" : false,
          "type" : "string",
          "enum" : [ "active", "inactive", "all" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClusterWithTopicMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/aggregated/brokers" : {
      "get" : {
        "tags" : [ "Aggregated metric operations" ],
        "summary" : "Get cluster with broker metrics",
        "description" : "",
        "operationId" : "getClusterWithBrokerMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClusterWithBrokerMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/aggregated/groups" : {
      "get" : {
        "tags" : [ "Aggregated metric operations" ],
        "summary" : "Get all consumer group details.",
        "description" : "",
        "operationId" : "getConsumerMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "requireTimelineMetrics",
          "in" : "query",
          "description" : "Whether to fetch timeline metrics",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State of the Producer",
          "required" : false,
          "type" : "string",
          "enum" : [ "active", "inactive", "all" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AggrConsumerMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/aggregated/groups/{groupName}" : {
      "get" : {
        "tags" : [ "Aggregated metric operations" ],
        "summary" : "Get consumer group details for the given groupName.",
        "description" : "",
        "operationId" : "getConsumerMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupName",
          "in" : "path",
          "description" : "Name of the consumer group",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "requireTimelineMetrics",
          "in" : "query",
          "description" : "Whether to fetch timeline metrics",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State of the Producer",
          "required" : false,
          "type" : "string",
          "enum" : [ "active", "inactive", "all" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AggrConsumerMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/brokers/{brokerId}" : {
      "get" : {
        "tags" : [ "Broker metrics operations" ],
        "summary" : "Get broker metrics for given brokerId.",
        "description" : "",
        "operationId" : "getBrokerMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "brokerId",
          "in" : "path",
          "description" : "Broker identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration. Supply either 'duration' [OR] 'from' & 'to' params",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Beginning of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "End of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BrokerMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/consumers/group/{groupId}" : {
      "get" : {
        "tags" : [ "Consumer metric operations." ],
        "summary" : "Get timeline metrics for a consumer group. This will return per partition metrics for a consumer group.",
        "description" : "",
        "operationId" : "getConsumerGroupMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "Consumer group identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration. Supply either 'duration' [OR] 'from' & 'to' params",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Beginning of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "End of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ConsumerGroupMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/producers" : {
      "get" : {
        "tags" : [ "Producer metrics operations" ],
        "summary" : "Get producer metrics for all the alive producers",
        "description" : "",
        "operationId" : "getAllProducerMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "state",
          "in" : "query",
          "description" : "State of the Producer",
          "required" : false,
          "type" : "string",
          "enum" : [ "active", "inactive", "all" ]
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration. Supply either 'duration' [OR] 'from' & 'to' params",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Beginning of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "End of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ProducerMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/producers/{producerClientId}" : {
      "get" : {
        "tags" : [ "Producer metrics operations" ],
        "summary" : "Get producer metrics for the given producerClientId",
        "description" : "",
        "operationId" : "getProducerMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "producerClientId",
          "in" : "path",
          "description" : "Producer client identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration. Supply either 'duration' [OR] 'from' & 'to' params",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Beginning of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "End of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ProducerMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/topics/{topicName}" : {
      "get" : {
        "tags" : [ "Topic metrics operations" ],
        "summary" : "Get topic metrics for the given topic.",
        "description" : "",
        "operationId" : "getTopicMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "description" : "Name of the topic",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration. Supply either 'duration' [OR] 'from' & 'to' params",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Beginning of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "End of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TopicMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/metrics/topics/{topicName}/{partitionNum}" : {
      "get" : {
        "tags" : [ "Topic metrics operations" ],
        "summary" : "Get topic-partition metrics for the given topic-partition.",
        "description" : "",
        "operationId" : "getTopicMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "description" : "Name of the topic",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "partitionNum",
          "in" : "path",
          "description" : "Partition number",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Pre-defined Time duration. Supply either 'duration' [OR] 'from' & 'to' params",
          "required" : false,
          "type" : "string",
          "enum" : [ "LAST_THIRTY_MINUTES", "LAST_ONE_HOUR", "LAST_SIX_HOURS", "LAST_ONE_DAY" ]
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Beginning of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "End of the time period. Provide '-1' to fetch the latest value",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TopicPartitionMetrics"
            }
          }
        }
      }
    },
    "/api/v1/admin/topics/{topicName}/keySchema/versions" : {
      "get" : {
        "tags" : [ "Schema registry operations" ],
        "summary" : "Get schema versions for the given kafka topic name",
        "description" : "",
        "operationId" : "getKeySchemaVersionInfos",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SchemaVersionInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/topics/{topicName}/valueSchema/versions" : {
      "get" : {
        "tags" : [ "Schema registry operations" ],
        "summary" : "Get schema versions for the given kafka topic name",
        "description" : "",
        "operationId" : "getValueSchemaVersionInfos",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SchemaVersionInfo"
            }
          }
        }
      }
    },
    "/api/v1/admin/topics/{topicName}/schema/mapping" : {
      "get" : {
        "tags" : [ "Schema registry operations" ],
        "summary" : "Schema mapping for a given kafka topic name",
        "description" : "",
        "operationId" : "getSchemaMetaForTopic",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TopicSchemaMapping"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Schema registry operations" ],
        "summary" : "Register a schema name for a kafka topic name",
        "description" : "",
        "operationId" : "registerTopicSchemaMeta",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "topicName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TopicSchemaMapping"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      }
    },
    "/api/v1/admin/serdes" : {
      "get" : {
        "tags" : [ "Serdes related operations" ],
        "summary" : "List of supported serdes",
        "description" : "",
        "operationId" : "getSupportedSerdes",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SerdesMappings"
            }
          }
        }
      }
    },
    "/api/v1/admin/version" : {
      "get" : {
        "tags" : [ "Application context related operations" ],
        "summary" : "Returns version of SMM service",
        "description" : "",
        "operationId" : "getSMMVersion",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SMMVersion"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "BrokerNode" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "host" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "rack" : {
          "type" : "string"
        }
      }
    },
    "KafkaClusterInfo" : {
      "type" : "object",
      "properties" : {
        "brokerNodes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BrokerNode"
          }
        },
        "controller" : {
          "$ref" : "#/definitions/BrokerNode"
        },
        "clusterId" : {
          "type" : "string"
        }
      }
    },
    "ConsumerGroupInfo" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "topicPartitionAssignments" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/PartitionAssignment"
            }
          }
        }
      }
    },
    "PartitionAssignment" : {
      "type" : "object",
      "properties" : {
        "lag" : {
          "type" : "integer",
          "format" : "int64"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int64"
        },
        "logEndOffset" : {
          "type" : "integer",
          "format" : "int64"
        },
        "consumerInstanceId" : {
          "type" : "string"
        },
        "clientId" : {
          "type" : "string"
        },
        "host" : {
          "type" : "string"
        },
        "commitTimestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ConsumerInfo" : {
      "type" : "object",
      "properties" : {
        "clientId" : {
          "type" : "string"
        },
        "consumerPartitionInfos" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConsumerPartitionInfo"
          }
        }
      }
    },
    "ConsumerPartitionInfo" : {
      "type" : "object",
      "properties" : {
        "groupId" : {
          "type" : "string",
          "readOnly" : true
        },
        "topicPartitionOffsets" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/ConsumerPartitionOffsetInfo"
            }
          }
        }
      }
    },
    "ConsumerPartitionOffsetInfo" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lag" : {
          "type" : "integer",
          "format" : "int64"
        },
        "commitTimestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "KafkaResourceConfig" : {
      "type" : "object",
      "properties" : {
        "resourceType" : {
          "type" : "string"
        },
        "resourceName" : {
          "type" : "string"
        },
        "resourceConfigs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/KafkaResourceConfigEntry"
          }
        }
      }
    },
    "KafkaResourceConfigEntry" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "isDefault" : {
          "type" : "boolean"
        },
        "isSensitive" : {
          "type" : "boolean"
        },
        "isReadOnly" : {
          "type" : "boolean"
        },
        "default" : {
          "type" : "boolean"
        },
        "readOnly" : {
          "type" : "boolean"
        },
        "sensitive" : {
          "type" : "boolean"
        }
      }
    },
    "TopicInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "internal" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "partitions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TopicPartitionInfo"
          }
        }
      }
    },
    "TopicPartitionInfo" : {
      "type" : "object",
      "properties" : {
        "partition" : {
          "type" : "integer",
          "format" : "int32"
        },
        "leader" : {
          "$ref" : "#/definitions/BrokerNode"
        },
        "replicas" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BrokerNode"
          }
        },
        "isr" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BrokerNode"
          }
        }
      }
    },
    "TopicPartitionInfos" : {
      "type" : "object",
      "properties" : {
        "entries" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TopicPartitionInfo"
            }
          }
        }
      }
    },
    "TopicContent" : {
      "type" : "object",
      "properties" : {
        "keySchemaName" : {
          "type" : "string"
        },
        "valueSchemaName" : {
          "type" : "string"
        },
        "offsetToRecordMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/TopicRecord"
          }
        }
      }
    },
    "TopicRecord" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "object"
        },
        "value" : {
          "type" : "object"
        },
        "timestampType" : {
          "type" : "string",
          "enum" : [ "NO_TIMESTAMP_TYPE", "CREATE_TIME", "LOG_APPEND_TIME" ]
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "PartitionOffsetInfo" : {
      "type" : "object",
      "properties" : {
        "partitionId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "startOffset" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endOffset" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "TopicOffsetInfo" : {
      "type" : "object",
      "properties" : {
        "partitionOffsetInfos" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/PartitionOffsetInfo"
          }
        }
      }
    },
    "AggrTopicMetrics" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "messagesInCount" : {
          "type" : "number",
          "format" : "double"
        },
        "bytesInCount" : {
          "type" : "number",
          "format" : "double"
        },
        "bytesOutCount" : {
          "type" : "number",
          "format" : "double"
        },
        "partitionMetrics" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/WrappedTopicMetrics"
          }
        },
        "topicSummary" : {
          "$ref" : "#/definitions/TopicSummary"
        }
      }
    },
    "AggrTopicPartitionMetrics" : {
      "type" : "object",
      "properties" : {
        "partitionInfo" : {
          "$ref" : "#/definitions/TopicPartitionInfo"
        },
        "messagesInCount" : {
          "type" : "number",
          "format" : "double"
        },
        "bytesInCount" : {
          "type" : "number",
          "format" : "double"
        },
        "bytesOutCount" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "TopicSummary" : {
      "type" : "object",
      "properties" : {
        "numOfReplicas" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "numOfPartitions" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "numOfBrokersForTopic" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "preferredReplicasPercent" : {
          "type" : "number",
          "format" : "double",
          "readOnly" : true
        },
        "underReplicatedPercent" : {
          "type" : "number",
          "format" : "double",
          "readOnly" : true
        }
      }
    },
    "WrappedTopicMetrics" : {
      "type" : "object",
      "properties" : {
        "aggrTopicPartitionMetrics" : {
          "$ref" : "#/definitions/AggrTopicPartitionMetrics"
        },
        "producerIdToOutMessagesCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "consumerGroupIdToLag" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "BrokerDetails" : {
      "type" : "object",
      "properties" : {
        "totalNumReplicas" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalNumInSyncReplicas" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalMessages" : {
          "type" : "integer",
          "format" : "int64"
        },
        "producerDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProducerDetail"
          }
        },
        "consumerDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConsumerDetail"
          }
        },
        "topicLeaderPartitionInfos" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TopicLeaderPartitionInfo"
          }
        },
        "cpuUsagePercentage" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "diskUsagePercentage" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "cpuLoad" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "memoryUsagePercentage" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "logRetentionPeriodValue" : {
          "type" : "integer",
          "format" : "int64"
        },
        "logRetentionPeriodTimeUnit" : {
          "type" : "string"
        }
      }
    },
    "ConsumerDetail" : {
      "type" : "object",
      "properties" : {
        "consumerGroupName" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "state" : {
          "type" : "string"
        },
        "lag" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ProducerDetail" : {
      "type" : "object",
      "properties" : {
        "producerName" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "messageCount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "TopicLeaderPartitionInfo" : {
      "type" : "object",
      "properties" : {
        "topicName" : {
          "type" : "string"
        },
        "partitionId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "bytesInCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "bytesOutCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalTopicBytesInCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalTopicBytesOutCount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "AggrProducerMetrics" : {
      "type" : "object",
      "properties" : {
        "clientId" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "latestOutMessagesCount" : {
          "type" : "number",
          "format" : "double"
        },
        "outMessagesCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "wrappedPartitionMetrics" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/WrappedProducerMetrics"
            }
          }
        }
      }
    },
    "WrappedProducerMetrics" : {
      "type" : "object",
      "properties" : {
        "latestOutMessagesCount" : {
          "type" : "number",
          "format" : "double"
        },
        "partitionMetrics" : {
          "$ref" : "#/definitions/AggrTopicPartitionMetrics"
        },
        "consumerGroupIdToLag" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "ClusterWithTopicMetrics" : {
      "type" : "object",
      "properties" : {
        "totalBytesIn" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalBytesOut" : {
          "type" : "integer",
          "format" : "int64"
        },
        "producedPerSec" : {
          "type" : "number",
          "format" : "double"
        },
        "fetchedPerSec" : {
          "type" : "number",
          "format" : "double"
        },
        "inSyncReplicas" : {
          "type" : "integer",
          "format" : "int64"
        },
        "outOfSyncReplicas" : {
          "type" : "integer",
          "format" : "int64"
        },
        "underReplicatedPartitions" : {
          "type" : "integer",
          "format" : "int64"
        },
        "offlinePartitions" : {
          "type" : "integer",
          "format" : "int64"
        },
        "aggrTopicMetricsCollection" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AggrTopicMetrics"
          }
        }
      }
    },
    "AggrBrokerMetrics" : {
      "type" : "object",
      "properties" : {
        "node" : {
          "$ref" : "#/definitions/BrokerNode"
        },
        "throughput" : {
          "type" : "number",
          "format" : "double"
        },
        "messageIn" : {
          "type" : "integer",
          "format" : "int64"
        },
        "cpuIdle" : {
          "type" : "number",
          "format" : "double"
        },
        "loadAvg" : {
          "type" : "number",
          "format" : "double"
        },
        "memFreePercent" : {
          "type" : "number",
          "format" : "double"
        },
        "diskPercent" : {
          "type" : "number",
          "format" : "double"
        },
        "diskIo" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "ClusterWithBrokerMetrics" : {
      "type" : "object",
      "properties" : {
        "totalBytesIn" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalBytesOut" : {
          "type" : "integer",
          "format" : "int64"
        },
        "producedPerSec" : {
          "type" : "number",
          "format" : "double"
        },
        "fetchedPerSec" : {
          "type" : "number",
          "format" : "double"
        },
        "activeControllers" : {
          "type" : "integer",
          "format" : "int32"
        },
        "uncleanLeaderElectionsPerSec" : {
          "type" : "number",
          "format" : "double"
        },
        "requestPoolUsage" : {
          "type" : "number",
          "format" : "double"
        },
        "aggrBrokerMetricsCollection" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AggrBrokerMetrics"
          }
        }
      }
    },
    "AggrConsumerMetrics" : {
      "type" : "object",
      "properties" : {
        "consumerGroupInfo" : {
          "$ref" : "#/definitions/ConsumerGroupInfo"
        },
        "wrappedPartitionMetrics" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/WrappedConsumerMetrics"
            }
          }
        }
      }
    },
    "ConsumerGroupPartitionMetrics" : {
      "type" : "object",
      "properties" : {
        "lag" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "lagRate" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "committedOffsets" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "committedOffsetsRate" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        }
      }
    },
    "WrappedConsumerMetrics" : {
      "type" : "object",
      "properties" : {
        "partitionMetrics" : {
          "$ref" : "#/definitions/AggrTopicPartitionMetrics"
        },
        "producerIdToOutMessagesCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "groupPartitionMetrics" : {
          "$ref" : "#/definitions/ConsumerGroupPartitionMetrics"
        }
      }
    },
    "BrokerMetrics" : {
      "type" : "object",
      "properties" : {
        "bytesInCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "bytesOutCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "messagesInCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "cpuIdle" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "loadFive" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "memFreePercent" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "diskPercent" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "diskWriteBps" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "diskReadBps" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        }
      }
    },
    "ConsumerGroupMetrics" : {
      "type" : "object",
      "properties" : {
        "lag" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "lagRate" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "committedOffsets" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "committedOffsetsRate" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "topicPartitionMetrics" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/ConsumerGroupPartitionMetrics"
            }
          }
        }
      }
    },
    "ProducerMetrics" : {
      "type" : "object",
      "properties" : {
        "clientId" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "outMessagesCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "number",
                "format" : "double"
              }
            }
          }
        }
      }
    },
    "TopicMetrics" : {
      "type" : "object",
      "properties" : {
        "messagesInCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "bytesInCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "bytesOutCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "partitionMetrics" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/TopicPartitionMetrics"
          }
        }
      }
    },
    "TopicPartitionMetrics" : {
      "type" : "object",
      "properties" : {
        "messagesInCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "bytesInCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "bytesOutCount" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        }
      }
    },
    "MergeInfo" : {
      "type" : "object",
      "properties" : {
        "schemaBranchName" : {
          "type" : "string"
        },
        "schemaVersionId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "SchemaVersionInfo" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "schemaMetadataId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32"
        },
        "schemaText" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "stateId" : {
          "type" : "string",
          "format" : "byte"
        },
        "mergeInfo" : {
          "$ref" : "#/definitions/MergeInfo"
        }
      }
    },
    "TopicSchemaMapping" : {
      "type" : "object",
      "properties" : {
        "keySchemaName" : {
          "type" : "string",
          "readOnly" : true
        },
        "valueSchemaName" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "DeserializerInfo" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "className" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "SerdesMappings" : {
      "type" : "object",
      "properties" : {
        "deserializerInfos" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeserializerInfo"
          }
        }
      }
    },
    "SMMVersion" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "revision" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    }
  }
}