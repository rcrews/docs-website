{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Cruise Control API",
    "description": "Cruise-control is the first of its kind to fully automate the dynamic workload rebalance and self-healing of a kafka cluster. It provides great value to Kafka users by simplifying the operation of Kafka clusters.",
    "contact": {}
  },
  "host": "www.example.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/kafkacruisecontrol/add_broker": {
      "post": {
        "description": "Move partitions to the specified brokers, according to the specified goals.",
        "summary": "addBroker",
        "operationId": "addBroker",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brokerid",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of target broker ids."
          },
          {
            "name": "dryrun",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to dry-run the request or not."
          },
          {
            "name": "throttle_added_broker",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to throttle the added broker."
          },
          {
            "name": "allow_capacity_estimation",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information."
          },
          {
            "name": "goals",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of goals used to generate proposal, the default goals will be used if this parameter is not specified."
          },
          {
            "name": "concurrent_partition_movements_per_broker",
            "in": "query",
            "required": false,
            "default": 5,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing replica movements going into/out of each broker."
          },
          {
            "name": "concurrent_leader_movements",
            "in": "query",
            "required": false,
            "default": 1000,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing leadership movements."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "skip_hard_goal_check",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow hard goals be skipped in proposal generation."
          },
          {
            "name": "excluded_topics",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specify topic whose partition is excluded from replica movement."
          },
          {
            "name": "kafka_assigner",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to use Kafka assigner mode to general proposal."
          },
          {
            "name": "use_ready_default_goals",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to only use ready goals to generate proposal."
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return detailed state information."
          },
          {
            "name": "exclude_recently_demoted_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow leader replicas to be moved to recently demoted broker."
          },
          {
            "name": "exclude_recently_removed_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow replicas to be moved to recently removed broker."
          },
          {
            "name": "replica_movement_strategies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Replica movement strategies to use."
          },
          {
            "name": "execution_progress_check_interval_ms",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 5000.0,
            "exclusiveMinimum": false,
            "description": "Execution progress check interval in milliseconds."
          },
          {
            "name": "stop_ongoing_execution",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to stop the ongoing execution (if any) and start executing the given request."
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason for request."
          },
          {
            "name": "review_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Review id for 2FA."
          },
          {
            "name": "data_from",
            "in": "query",
            "required": false,
            "default": "VALID_WINDOWS",
            "type": "string",
            "description": "Whether to calculate proposal from available valid partitions or valid windows."
          },
          {
            "name": "replication_throttle",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "Upper bound on the bandwidth in bytes per second used to move replicas."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful add brokers response.",
            "schema": {
              "$ref": "#/definitions/OptimizationResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/admin": {
      "post": {
        "description": "Dynamically change some configs of Cruise Control.",
        "summary": "admin",
        "operationId": "admin",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "disable_self_healing_for",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "GOAL_VIOLATION",
                "BROKER_FAILURE",
                "METRIC_ANOMALY",
                "DISK_FAILURE",
                "TOPIC_ANOMALY"
              ]
            },
            "description": "Disable self-healing for certain anomaly types."
          },
          {
            "name": "enable_self_healing_for",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "GOAL_VIOLATION",
                "BROKER_FAILURE",
                "METRIC_ANOMALY",
                "DISK_FAILURE",
                "TOPIC_ANOMALY"
              ]
            },
            "description": "Enable self-healing for certain anomaly types."
          },
          {
            "name": "concurrent_partition_movements_per_broker",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "Change upper bound of ongoing replica movements going into/out of each broker."
          },
          {
            "name": "concurrent_intra_broker_partition_movements",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "Change upper bound of ongoing replica movements between disks within each broker."
          },
          {
            "name": "concurrent_leader_movements",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "Change upper bound of ongoing leadership movements."
          },
          {
            "name": "drop_recently_removed_brokers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Drop broker ids from recently removed broker list so that Cruise Control can move replicas to these brokers."
          },
          {
            "name": "drop_recently_demoted_brokers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Drop broker ids from recently demoted broker list so that Cruise Control can move leader replicas or to transfer replica leadership to these brokers."
          },
          {
            "name": "execution_progress_check_interval_ms",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 5000.0,
            "exclusiveMinimum": false,
            "description": "Change execution progress check interval in milliseconds."
          },
          {
            "name": "review_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Review id for 2FA"
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful admin response.",
            "schema": {
              "$ref": "#/definitions/AdminResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/bootstrap": {
      "get": {
        "description": "Bootstrap Cruise Control.",
        "summary": "bootstrap",
        "operationId": "bootstrap",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": -1,
            "type": "integer",
            "format": "int64",
            "minimum": -1.0,
            "exclusiveMinimum": false,
            "description": "Timestamp in millisecond of earliest metrics sample to load during bootstrap."
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Timestamp in millisecond of latest metrics sample to load during bootstrap, current time will be used if this parameter is not specified."
          },
          {
            "name": "clearmetrics",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whethere clear the collected metrics sample during bootstrap."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful admin response.",
            "schema": {
              "$ref": "#/definitions/BootstrapResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/demote_broker": {
      "post": {
        "description": "Demote specified brokers.",
        "summary": "demoteBroker",
        "operationId": "demoteBroker",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brokerid",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of target broker ids."
          },
          {
            "name": "dryrun",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to dry-run the request or not."
          },
          {
            "name": "concurrent_leader_movements",
            "in": "query",
            "required": false,
            "default": 1000,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing leadership movements."
          },
          {
            "name": "allow_capacity_estimation",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "skip_urp_demotion",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to operate on partitions which are currently under-replicated."
          },
          {
            "name": "exclude_follower_demotion",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to operate on partitions which only have follower replicas on the specified broker(s)."
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return detailed state information."
          },
          {
            "name": "exclude_recently_demoted_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow leader replicas to be moved to recently demoted broker."
          },
          {
            "name": "replica_movement_strategies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Replica movement strategies to use."
          },
          {
            "name": "brokerid_and_logdirs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "List of broker id and logdir pair to be demoted in the cluster."
          },
          {
            "name": "replication_throttle",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "Upper bound on the bandwidth in bytes per second used to move replicas."
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason for request."
          },
          {
            "name": "execution_progress_check_interval_ms",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 5000.0,
            "exclusiveMinimum": false,
            "description": "Execution progress check interval in milliseconds."
          },
          {
            "name": "stop_ongoing_execution",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to stop the ongoing execution (if any) and start executing the given request."
          },
          {
            "name": "review_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Review id for 2FA."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful demote brokers response.",
            "schema": {
              "$ref": "#/definitions/OptimizationResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/fix_offline_replicas": {
      "post": {
        "description": "Fix offline replicas by moving currently offline replicas to healthy brokers.",
        "summary": "fixOfflineReplicas",
        "operationId": "fixOfflineReplicas",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dryrun",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether dry-run the request or not."
          },
          {
            "name": "goals",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of goals used to generate proposal, the default goals will be used if this parameter is not specified."
          },
          {
            "name": "allow_capacity_estimation",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information."
          },
          {
            "name": "concurrent_partition_movements_per_broker",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing replica movements going into/out of each broker."
          },
          {
            "name": "concurrent_leader_movements",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing leadership movements."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "skip_hard_goal_check",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow hard goals be skipped in proposal generation."
          },
          {
            "name": "excluded_topics",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specify topic whose partition is excluded from replica movement."
          },
          {
            "name": "use_ready_default_goals",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to only use ready goals to generate proposal."
          },
          {
            "name": "data_from",
            "in": "query",
            "required": false,
            "default": "VALID_WINDOWS",
            "type": "string",
            "description": "Whether to calculate proposal from available valid partitions or valid windows."
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return detailed state information."
          },
          {
            "name": "exclude_recently_demoted_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow leader replicas to be moved to recently demoted broker."
          },
          {
            "name": "exclude_recently_removed_brokers",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to allow leader replicas to be moved to recently removed broker."
          },
          {
            "name": "replica_movement_strategies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Replica movement strategies to use."
          },
          {
            "name": "review_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Review id for 2FA"
          },
          {
            "name": "replication_throttle",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "Upper bound on the bandwidth in bytes per second used to move replicas."
          },
          {
            "name": "execution_progress_check_interval_ms",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 5000.0,
            "exclusiveMinimum": false,
            "description": "Execution progress check interval in milliseconds."
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason for request."
          },
          {
            "name": "stop_ongoing_execution",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to stop the ongoing execution (if any) and start executing the given request."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful rebalance response.",
            "schema": {
              "$ref": "#/definitions/OptimizationResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/kafka_cluster_state": {
      "get": {
        "description": "Retrive the current Kafka cluster state.",
        "summary": "kafkaClusterState",
        "operationId": "kafkaClusterState",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topic",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Topic regex to filter partition information in response."
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return detailed state information."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Current Kafka cluster state.",
            "schema": {
              "$ref": "#/definitions/KafkaClusterState"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/load": {
      "get": {
        "description": "Get the cluster load once Cruise Control Load Monitor is running.",
        "summary": "load",
        "operationId": "load",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": -1,
            "type": "integer",
            "format": "int64",
            "minimum": -1.0,
            "exclusiveMinimum": false,
            "description": "Start time of the cluster load. Default is time of earliest valid window."
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "End time of the cluster load. Default is current system time."
          },
          {
            "name": "time",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "End time of the clutser load. Default is current system time, mutually exclusive with end parameter."
          },
          {
            "name": "allow_capacity_estimation",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "populate_disk_info",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether show the load of each disk of broker."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful load from valid partitions response.",
            "schema": {
              "$ref": "#/definitions/BrokerStats"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/partition_load": {
      "get": {
        "description": "Get the resource load for each partition.",
        "summary": "partitionload",
        "operationId": "partitionload",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resource",
            "in": "query",
            "required": false,
            "enum": [
              "cpu",
              "networkInbound",
              "networkOutbound",
              "disk"
            ],
            "default": "disk",
            "type": "string",
            "description": "The host and broker-level resource by which to sort the cruise-control response."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": -1,
            "type": "integer",
            "format": "int64",
            "minimum": -1.0,
            "exclusiveMinimum": false,
            "description": "The timestamp in millisecond of the earliest metric sample use to generate load."
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "The timestamp in millisecond of the latest metric sample use to generate load, current time will be used if this parameter is not specified."
          },
          {
            "name": "entries",
            "in": "query",
            "required": false,
            "default": 2147483647,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The number of entries to show in the response."
          },
          {
            "name": "topic",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A regular expression used to filter the partition load returned based on topic."
          },
          {
            "name": "partition",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partition or partition range to filter partition load returned."
          },
          {
            "name": "min_valid_partition_ratio",
            "in": "query",
            "required": false,
            "default": 0.98,
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "maximum": 1.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The minimum required ratio of partition load data completeness."
          },
          {
            "name": "allow_capacity_estimation",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information."
          },
          {
            "name": "max_load",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "If true, the maximum load is returned."
          },
          {
            "name": "avg_load",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "If true, the average load is returned."
          },
          {
            "name": "brokerid",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Set of broker ids used to filter partition load returned."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful partition load state response.",
            "schema": {
              "$ref": "#/definitions/PartitionLoadState"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/pause_sampling": {
      "post": {
        "description": "Pause metric sampling.",
        "summary": "pauseSampling",
        "operationId": "pauseSampling",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason for request."
          },
          {
            "name": "review_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Review id for 2FA"
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful execution response.",
            "schema": {
              "$ref": "#/definitions/PauseSamplingResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/proposals": {
      "get": {
        "description": "Get current proposals.",
        "summary": "proposals",
        "operationId": "proposals",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "kafka_assigner",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether use Kafka assigner mode to general proposal."
          },
          {
            "name": "destination_broker_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Specify brokers to move replicas to."
          },
          {
            "name": "ignore_proposal_cache",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether ignore the cached proposal or not."
          },
          {
            "name": "rebalance_disk",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether balance load between disks within each broker or between brokers in cluster."
          },
          {
            "name": "data_from",
            "in": "query",
            "required": false,
            "enum": [
              "VALID_WINDOWS",
              "VALID_PARTITIONS"
            ],
            "default": "VALID_WINDOWS",
            "type": "string",
            "description": "Whether calculating proposal from available valid partitions or valid windows."
          },
          {
            "name": "use_ready_default_goals",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether only using ready goals to generate proposal."
          },
          {
            "name": "excluded_topics",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specify topic whose partition is excluded from replica movement."
          },
          {
            "name": "exclude_recently_removed_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether allow replicas to be moved to recently removed broker."
          },
          {
            "name": "goals",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of goals used to generate proposal, the default goals will be used if this parameter is not specified."
          },
          {
            "name": "allow_capacity_estimation",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether allow broker capacity to be estimated."
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return detailed state information."
          },
          {
            "name": "exclude_recently_demoted_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether allow leader replicas to be moved to recently demoted broker."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful optimization proposals response.",
            "schema": {
              "$ref": "#/definitions/OptimizationResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/rebalance": {
      "post": {
        "description": "Rebalance a Kafka cluster based on goals.",
        "summary": "rebalance",
        "operationId": "rebalance",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dryrun",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to dry-run the request or not."
          },
          {
            "name": "goals",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of goals used to generate proposal, the default goals will be used if this parameter is not specified."
          },
          {
            "name": "allow_capacity_estimation",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information."
          },
          {
            "name": "stop_ongoing_execution",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to stop the ongoing execution (if any) and start executing the given request."
          },
          {
            "name": "concurrent_partition_movements_per_broker",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing replica movements going into/out of each broker."
          },
          {
            "name": "concurrent_intra_broker_partition_movements",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing replica movements between disks within each broker."
          },
          {
            "name": "concurrent_leader_movements",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing leadership movements."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "skip_hard_goal_check",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow hard goals be skipped in proposal generation."
          },
          {
            "name": "excluded_topics",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specify topic whose partition is excluded from replica movement."
          },
          {
            "name": "use_ready_default_goals",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to only use ready goals to generate proposal."
          },
          {
            "name": "data_from",
            "in": "query",
            "required": false,
            "default": "VALID_WINDOWS",
            "type": "string",
            "description": "Whether to calculate proposal from available valid partitions or valid windows."
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return detailed state information."
          },
          {
            "name": "exclude_recently_demoted_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow leader replicas to be moved to recently demoted broker."
          },
          {
            "name": "exclude_recently_removed_brokers",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to allow replicas to be moved to recently removed broker."
          },
          {
            "name": "replica_movement_strategies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Replica movement strategies to use."
          },
          {
            "name": "ignore_proposal_cache",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to ignore the cached proposal or not."
          },
          {
            "name": "destination_broker_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specify the destination brokers for partitions to move replicas to."
          },
          {
            "name": "kafka_assigner",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to use Kafka assigner mode to general proposal."
          },
          {
            "name": "rebalance_disk",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to balance load between brokers or between disks within broker."
          },
          {
            "name": "review_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Review id for 2FA."
          },
          {
            "name": "replication_throttle",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "Upper bound on the bandwidth in bytes per second used to move replicas."
          },
          {
            "name": "execution_progress_check_interval_ms",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 5000.0,
            "exclusiveMinimum": false,
            "description": "Execution progress check interval in milliseconds."
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason for request."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful rebalance response.",
            "schema": {
              "$ref": "#/definitions/OptimizationResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/remove_broker": {
      "post": {
        "description": "Remove/decomission specified brokers.",
        "summary": "removeBroker",
        "operationId": "removeBroker",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brokerid",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of target broker ids."
          },
          {
            "name": "dryrun",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to dry-run the request or not."
          },
          {
            "name": "throttle_removed_broker",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to throttle the added broker."
          },
          {
            "name": "goals",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of goals used to generate proposal, the default goals will be used if this parameter is not specified."
          },
          {
            "name": "allow_capacity_estimation",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information."
          },
          {
            "name": "concurrent_partition_movements_per_broker",
            "in": "query",
            "required": false,
            "default": 5,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing replica movements going into/out of each broker."
          },
          {
            "name": "concurrent_leader_movements",
            "in": "query",
            "required": false,
            "default": 1000,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing leadership movements."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "skip_hard_goal_check",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow hard goals be skipped in proposal generation."
          },
          {
            "name": "excluded_topics",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specify topic whose partition is excluded from replica movement."
          },
          {
            "name": "kafka_assigner",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to use Kafka assigner mode to general proposal."
          },
          {
            "name": "use_ready_default_goals",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to only use ready goals to generate proposal."
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return detailed state information."
          },
          {
            "name": "exclude_recently_demoted_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow leader replicas to be moved to recently demoted broker."
          },
          {
            "name": "exclude_recently_removed_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow replicas to be moved to recently removed broker."
          },
          {
            "name": "replica_movement_strategies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Replica movement strategies to use."
          },
          {
            "name": "destination_broker_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma-separated and/or space-separated list of broker IDs."
          },
          {
            "name": "execution_progress_check_interval_ms",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 5000.0,
            "exclusiveMinimum": false,
            "description": "Execution progress check interval in milliseconds."
          },
          {
            "name": "stop_ongoing_execution",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to stop the ongoing execution (if any) and start executing the given request."
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason for request."
          },
          {
            "name": "review_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Review id for 2FA."
          },
          {
            "name": "data_from",
            "in": "query",
            "required": false,
            "default": "VALID_WINDOWS",
            "type": "string",
            "description": "Whether to calculate proposal from available valid partitions or valid windows."
          },
          {
            "name": "replication_throttle",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "Upper bound on the bandwidth in bytes per second used to move replicas."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful add brokers response.",
            "schema": {
              "$ref": "#/definitions/OptimizationResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/resume_sampling": {
      "post": {
        "description": "Resume metric sampling.",
        "summary": "resumeSampling",
        "operationId": "resumeSampling",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason for request."
          },
          {
            "name": "review_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Review id for 2FA."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful execution response.",
            "schema": {
              "$ref": "#/definitions/ResumeSamplingResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/review": {
      "post": {
        "description": "Reivew pending Cruise Control requests.",
        "summary": "review",
        "operationId": "review",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "approve",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Approve one or more pending Cruise Control requests."
          },
          {
            "name": "discard",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Reject one or more pending Cruise Control requests."
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason of approval or rejection."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful review response.",
            "schema": {
              "$ref": "#/definitions/ReviewResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/review_board": {
      "get": {
        "description": "Check review status of Cruise Control requests.",
        "summary": "reviewBoard",
        "operationId": "reviewBoard",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "review_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Ids for selected request to check."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful review response.",
            "schema": {
              "$ref": "#/definitions/ReviewResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/state": {
      "get": {
        "description": "Get the state of cruise control.",
        "summary": "Get the state of cruise control.",
        "operationId": "Getthestateofcruisecontrol.",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "substates",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "executor",
                "analyzer",
                "monitor",
                "anomaly_detector"
              ]
            },
            "description": "The substates for which to retrieve state from cruise-control."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return detailed state information."
          },
          {
            "name": "super_verbose",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return super-verbose state information."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful state response.",
            "schema": {
              "$ref": "#/definitions/CruiseControlState"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/stop_proposal_execution": {
      "post": {
        "description": "Stop ongoing execution in Cruise Control.",
        "summary": "stopProposalExecution",
        "operationId": "stopProposalExecution",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "force_stop",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "If true, stop execution forcefully by deleting the /admin/partition_reassignemt, /preferred_replica_election and /controller zNodes in Zookeeper."
          },
          {
            "name": "review_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Review id for 2FA."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful admin response.",
            "schema": {
              "$ref": "#/definitions/StopProposalResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/topic_configuration": {
      "post": {
        "description": "Change the configuration of a topic",
        "summary": "Change the configuration of a topic",
        "operationId": "Changetheconfigurationofatopic",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dryrun",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Whether to dry-run the request or not."
          },
          {
            "name": "topic",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Regular expression to specify subject topics."
          },
          {
            "name": "replication_factor",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "Target replication factor."
          },
          {
            "name": "data_from",
            "in": "query",
            "required": false,
            "default": "VALID_WINDOWS",
            "type": "string",
            "description": "Whether to calculate proposal from available valid partitions or valid windows."
          },
          {
            "name": "goals",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of goals used to generate proposal, the default goals will be used if this parameter is not specified."
          },
          {
            "name": "allow_capacity_estimation",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow capacity estimation when cruise-control is unable to obtain all per-broker capacity information."
          },
          {
            "name": "concurrent_partition_movements_per_broker",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing replica movements going into/out of each broker."
          },
          {
            "name": "concurrent_leader_movements",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "The upper bound of ongoing leadership movements."
          },
          {
            "name": "skip_hard_goal_check",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow hard goals be skipped in proposal generation."
          },
          {
            "name": "exclude_recently_demoted_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow leader replicas to be moved to recently demoted broker."
          },
          {
            "name": "exclude_recently_removed_brokers",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow replicas to be moved to recently removed broker."
          },
          {
            "name": "excluded_topics",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specify topic whose partition is excluded from replica movement."
          },
          {
            "name": "execution_progress_check_interval_ms",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 5000.0,
            "exclusiveMinimum": false,
            "description": "Execution progress check interval in milliseconds."
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason for request."
          },
          {
            "name": "replica_movement_strategies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Replica movement strategies to use."
          },
          {
            "name": "replication_throttle",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 1.0,
            "exclusiveMinimum": false,
            "description": "Upper bound on the bandwidth in bytes per second used to move replicas."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "review_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Review id for 2FA."
          },
          {
            "name": "skip_rack_awareness_check",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to allow rack awareness check to be skipped."
          },
          {
            "name": "stop_ongoing_execution",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to stop the ongoing execution (if any) and start executing the given request."
          },
          {
            "name": "use_ready_default_goals",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to only use ready goals to generate proposal."
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Return detailed state information."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful topic configuration response.",
            "schema": {
              "$ref": "#/definitions/OptimizationResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/train": {
      "get": {
        "description": "Train Cruise Control to better model broker cpu usage.",
        "summary": "train",
        "operationId": "train",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": -1,
            "type": "integer",
            "format": "int64",
            "minimum": -1.0,
            "exclusiveMinimum": false,
            "description": "Timestamp in millisecond of earliest metrics sample used to train Cruise Control."
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "Timestamp in millisecond of latest metrics sample used to train Cruise Control, current time will be used if this parameter is not specified."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON format or not."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful train response.",
            "schema": {
              "$ref": "#/definitions/TrainResult"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/kafkacruisecontrol/user_tasks": {
      "get": {
        "description": "Get the recent user tasks from cruise control.",
        "summary": "Get the recent user tasks from cruise control.",
        "operationId": "Gettherecentusertasksfromcruisecontrol.",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "client_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma separated IP addresses to filter the task results Cruise Control report."
          },
          {
            "name": "endpoints",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma separated endpoints to filter the task results Cruise Control report."
          },
          {
            "name": "entries",
            "in": "query",
            "required": false,
            "default": "MAX_INT",
            "type": "integer",
            "format": "int64",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "The number of entries to show in the response."
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma separated HTTP request types to filter the task results Cruise Control report."
          },
          {
            "name": "user_task_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma separated UUIDs to filter the task results Cruise Control report."
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "If true, cruise-control's response is in JSON format."
          },
          {
            "name": "fetch_completed_task",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether return the original request's final response."
          },
          {
            "name": "get_response_schema",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to return in JSON schema in response header or not."
          },
          {
            "name": "doAs",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user specified by a trusted proxy in that authentication model."
          }
        ],
        "responses": {
          "200": {
            "description": "User tasks state response.",
            "schema": {
              "$ref": "#/definitions/UserTaskState"
            },
            "headers": {}
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "KafkaClusterState": {
      "title": "KafkaClusterState",
      "type": "object",
      "properties": {
        "KafkaBrokerState": {
          "$ref": "#/definitions/ClusterBrokerState"
        },
        "KafkaPartitionState": {
          "$ref": "#/definitions/ClusterPartitionState"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "KafkaBrokerState",
        "KafkaPartitionState",
        "version"
      ]
    },
    "ClusterBrokerState": {
      "title": "ClusterBrokerState",
      "type": "object",
      "properties": {
        "LeaderCountByBrokerId": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "OutOfSyncCountByBrokerId": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "ReplicaCountByBrokerId": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "OfflineReplicaCountByBrokerId": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "IsController": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "OnlineLogDirsByBrokerId": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "OfflineLogDirsByBrokerId": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "required": [
        "LeaderCountByBrokerId",
        "OutOfSyncCountByBrokerId",
        "ReplicaCountByBrokerId",
        "OfflineReplicaCountByBrokerId",
        "IsController",
        "OnlineLogDirsByBrokerId",
        "OfflineLogDirsByBrokerId"
      ]
    },
    "ClusterPartitionState": {
      "title": "ClusterPartitionState",
      "type": "object",
      "properties": {
        "offline": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartitionState"
          }
        },
        "with-offline-replicas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartitionState"
          }
        },
        "urp": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartitionState"
          }
        },
        "under-min-isr": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartitionState"
          }
        },
        "other": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartitionState"
          }
        }
      },
      "required": [
        "offline",
        "with-offline-replicas",
        "urp",
        "under-min-isr"
      ]
    },
    "PartitionState": {
      "title": "PartitionState",
      "type": "object",
      "properties": {
        "topic": {
          "type": "string"
        },
        "partition": {
          "type": "integer",
          "format": "int32"
        },
        "leader": {
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "in-sync": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "out-of-sync": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "offline": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "required": [
        "topic",
        "partition",
        "leader",
        "replicas",
        "in-sync",
        "out-of-sync",
        "offline"
      ]
    },
    "ErrorResponse": {
      "title": "ErrorResponse",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "stackTrace": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "required": [
        "version",
        "stackTrace",
        "errorMessage"
      ]
    },
    "AdminResult": {
      "title": "AdminResult",
      "type": "object",
      "properties": {
        "selfHealingEnabledBefore": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "selfHealingEnabledAfter": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "ongoingConcurrencyChangeRequest": {
          "type": "string"
        },
        "dropRecentBrokersRequest": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "version"
      ]
    },
    "AnalyzerState": {
      "title": "AnalyzerState",
      "type": "object",
      "properties": {
        "isProposalReady": {
          "type": "boolean"
        },
        "readyGoals": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "goalReadiness": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GoalReadinessRecord"
          }
        }
      },
      "required": [
        "isProposalReady",
        "readyGoals"
      ]
    },
    "GoalReadinessRecord": {
      "title": "GoalReadinessRecord",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "modelCompleteRequirement": {
          "$ref": "#/definitions/ModelCompletenessRequirements"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "required": [
        "name",
        "modelCompleteRequirement",
        "status"
      ]
    },
    "ModelCompletenessRequirements": {
      "title": "ModelCompletenessRequirements",
      "type": "object",
      "properties": {
        "requiredNumSnapshots": {
          "type": "number",
          "format": "double"
        },
        "minMonitoredPartitionsPercentage": {
          "type": "number",
          "format": "double"
        },
        "includeAllTopics": {
          "type": "boolean"
        }
      },
      "required": [
        "requiredNumSnapshots",
        "minMonitoredPartitionsPercentage",
        "includeAllTopics"
      ]
    },
    "AnomalyDetectorState": {
      "title": "AnomalyDetectorState",
      "type": "object",
      "properties": {
        "selfHealingEnabled": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "selfHealingDisabled": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "selfHealingEnabledRatio": {
          "$ref": "#/definitions/SelfHealingEnabledRatio"
        },
        "recentGoalViolations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnomalyDetails"
          }
        },
        "recentBrokerFailures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnomalyDetails"
          }
        },
        "recentMetricAnomalies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnomalyDetails"
          }
        },
        "recentDiskFailures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnomalyDetails"
          }
        },
        "recentTopicAnomalies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnomalyDetails"
          }
        },
        "metrics": {
          "$ref": "#/definitions/AnomalyMetrics"
        },
        "ongoingSelfHealingAnomaly": {
          "type": "string"
        },
        "balancednessScore": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "selfHealingEnabled",
        "selfHealingDisabled",
        "selfHealingEnabledRatio",
        "recentGoalViolations",
        "recentBrokerFailures",
        "recentMetricAnomalies",
        "recentDiskFailures",
        "recentTopicAnomalies",
        "metrics",
        "balancednessScore"
      ]
    },
    "AnomalyDetails": {
      "title": "AnomalyDetails",
      "type": "object",
      "properties": {
        "statusUpdateMs": {
          "type": "integer",
          "format": "int64"
        },
        "detectionMs": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "$ref": "#/definitions/Status1"
        },
        "anomalyId": {
          "type": "string"
        },
        "fixableViolatedGoals": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unfixableViolatedGoals": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "optimizationResult": {
          "type": "string"
        },
        "failedBrokersByTimeMs": {
          "description": "Dictionary of broker id to failure time in MS.",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "failedDisksByTimeMs": {
          "description": "Dictionary of broker id to a dictionary of log dir to failure time in MS.",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "statusUpdateMs",
        "detectionMs",
        "status",
        "anomalyId"
      ]
    },
    "SelfHealingEnabledRatio": {
      "title": "SelfHealingEnabledRatio",
      "type": "object",
      "properties": {
        "GOAL_VIOLATION": {
          "type": "number",
          "format": "double"
        },
        "BROKER_FAILURE": {
          "type": "number",
          "format": "double"
        },
        "METRIC_ANOMALY": {
          "type": "number",
          "format": "double"
        },
        "DISK_FAILURE": {
          "type": "number",
          "format": "double"
        },
        "TOPIC_ANOMALY": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "GOAL_VIOLATION",
        "BROKER_FAILURE",
        "METRIC_ANOMALY",
        "DISK_FAILURE",
        "TOPIC_ANOMALY"
      ]
    },
    "AnomalyMetrics": {
      "title": "AnomalyMetrics",
      "type": "object",
      "properties": {
        "meanTimeBetweenAnomaliesMs": {
          "$ref": "#/definitions/MeanTimeBetweenAnomaliesMs"
        },
        "meanTimeToStartFixMs": {
          "type": "number",
          "format": "double"
        },
        "numSelfHealingStarted": {
          "type": "integer",
          "format": "int64"
        },
        "numSelfHealingFailedToStart": {
          "type": "integer",
          "format": "int64"
        },
        "ongoingAnomalyDurationMs": {
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "meanTimeBetweenAnomaliesMs",
        "meanTimeToStartFixMs",
        "numSelfHealingStarted",
        "numSelfHealingFailedToStart",
        "ongoingAnomalyDurationMs"
      ]
    },
    "MeanTimeBetweenAnomaliesMs": {
      "title": "MeanTimeBetweenAnomaliesMs",
      "type": "object",
      "properties": {
        "GOAL_VIOLATION": {
          "type": "number",
          "format": "double"
        },
        "BROKER_FAILURE": {
          "type": "number",
          "format": "double"
        },
        "METRIC_ANOMALY": {
          "type": "number",
          "format": "double"
        },
        "DISK_FAILURE": {
          "type": "number",
          "format": "double"
        },
        "TOPIC_ANOMALY": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "GOAL_VIOLATION",
        "BROKER_FAILURE",
        "METRIC_ANOMALY",
        "DISK_FAILURE",
        "TOPIC_ANOMALY"
      ]
    },
    "BootstrapResult": {
      "title": "BootstrapResult",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "version",
        "message"
      ]
    },
    "BrokerStats": {
      "title": "BrokerStats",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "hosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SingleHostStats"
          }
        },
        "brokers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SingleBrokerStats"
          }
        }
      },
      "required": [
        "hosts",
        "brokers"
      ]
    },
    "SingleBrokerStats": {
      "title": "SingleBrokerStats",
      "type": "object",
      "properties": {
        "Host": {
          "type": "string"
        },
        "Broker": {
          "type": "integer",
          "format": "int32"
        },
        "BrokerState": {
          "$ref": "#/definitions/BrokerState"
        },
        "DiskMB": {
          "type": "number",
          "format": "double"
        },
        "DiskPct": {
          "type": "number",
          "format": "double"
        },
        "CpuPct": {
          "type": "number",
          "format": "double"
        },
        "LeaderNwInRate": {
          "type": "number",
          "format": "double"
        },
        "FollowerNwInRate": {
          "type": "number",
          "format": "double"
        },
        "NwOutRate": {
          "type": "number",
          "format": "double"
        },
        "PnwOutRate": {
          "type": "number",
          "format": "double"
        },
        "Replicas": {
          "type": "integer",
          "format": "int32"
        },
        "Leaders": {
          "type": "integer",
          "format": "int32"
        },
        "DiskState": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DiskStats"
          }
        }
      },
      "required": [
        "Host",
        "Broker",
        "BrokerState",
        "DiskMB",
        "DiskPct",
        "CpuPct",
        "LeaderNwInRate",
        "FollowerNwInRate",
        "NwOutRate",
        "PnwOutRate",
        "Replicas",
        "Leaders"
      ]
    },
    "DiskStats": {
      "title": "DiskStats",
      "description": "Based on _diskStatsByLogDir",
      "type": "object",
      "properties": {
        "DiskMB": {
          "type": "object"
        },
        "DiskPct": {
          "type": "object"
        },
        "NumLeaderReplicas": {
          "type": "integer",
          "format": "int32"
        },
        "NumReplicas": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "DiskMB",
        "DiskPct",
        "NumLeaderReplicas",
        "NumReplicas"
      ]
    },
    "SingleHostStats": {
      "title": "SingleHostStats",
      "type": "object",
      "properties": {
        "Host": {
          "type": "string"
        },
        "DiskMB": {
          "type": "number",
          "format": "double"
        },
        "DiskPct": {
          "type": "number",
          "format": "double"
        },
        "CpuPct": {
          "type": "number",
          "format": "double"
        },
        "LeaderNwInRate": {
          "type": "number",
          "format": "double"
        },
        "FollowerNwInRate": {
          "type": "number",
          "format": "double"
        },
        "NwOutRate": {
          "type": "number",
          "format": "double"
        },
        "PnwOutRate": {
          "type": "number",
          "format": "double"
        },
        "Replicas": {
          "type": "integer",
          "format": "int32"
        },
        "Leaders": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "Host",
        "DiskMB",
        "DiskPct",
        "CpuPct",
        "LeaderNwInRate",
        "FollowerNwInRate",
        "NwOutRate",
        "PnwOutRate",
        "Replicas",
        "Leaders"
      ]
    },
    "ClusterModelStats": {
      "title": "ClusterModelStats",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/ClusterModelStatsMetaData"
        },
        "statistics": {
          "$ref": "#/definitions/ClusterModelStatsValue"
        }
      },
      "required": [
        "metadata",
        "statistics"
      ]
    },
    "ClusterModelStatsMetaData": {
      "title": "ClusterModelStatsMetaData",
      "type": "object",
      "properties": {
        "brokers": {
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "type": "integer",
          "format": "int32"
        },
        "topics": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "brokers",
        "replicas",
        "topics"
      ]
    },
    "ClusterModelStatsValue": {
      "title": "ClusterModelStatsValue",
      "type": "object",
      "properties": {
        "AVG": {
          "$ref": "#/definitions/ClusterModelStatsValueHolder"
        },
        "MAX": {
          "$ref": "#/definitions/ClusterModelStatsValueHolder"
        },
        "MIN": {
          "$ref": "#/definitions/ClusterModelStatsValueHolder"
        },
        "STD": {
          "$ref": "#/definitions/ClusterModelStatsValueHolder"
        }
      },
      "required": [
        "AVG",
        "MAX",
        "MIN",
        "STD"
      ]
    },
    "ClusterModelStatsValueHolder": {
      "title": "ClusterModelStatsValueHolder",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "double"
        },
        "networkInbound": {
          "type": "number",
          "format": "double"
        },
        "networkOutbound": {
          "type": "number",
          "format": "double"
        },
        "disk": {
          "type": "number",
          "format": "double"
        },
        "potentialNwOut": {
          "type": "number",
          "format": "double"
        },
        "replicas": {
          "type": "number",
          "format": "double"
        },
        "leaderReplicas": {
          "type": "number",
          "format": "double"
        },
        "topicReplicas": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "cpu",
        "networkInbound",
        "networkOutbound",
        "disk",
        "potentialNwOut",
        "replicas",
        "leaderReplicas",
        "topicReplicas"
      ]
    },
    "CruiseControlState": {
      "title": "CruiseControlState",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "MonitorState": {
          "$ref": "#/definitions/LoadMonitorState"
        },
        "ExecutorState": {
          "$ref": "#/definitions/ExecutorState"
        },
        "AnalyzerState": {
          "$ref": "#/definitions/AnalyzerState"
        },
        "AnomalyDetectorState": {
          "$ref": "#/definitions/AnomalyDetectorState"
        }
      },
      "required": [
        "version"
      ]
    },
    "ExecutionProposal": {
      "title": "ExecutionProposal",
      "type": "object",
      "properties": {
        "topicPartition": {
          "type": "string"
        },
        "oldLeader": {
          "type": "integer",
          "format": "int32"
        },
        "oldReplicas": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "newReplicas": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "required": [
        "topicPartition",
        "oldLeader",
        "oldReplicas",
        "newReplicas"
      ]
    },
    "ExecutorState": {
      "title": "ExecutorState",
      "type": "object",
      "properties": {
        "triggeredUserTaskId": {
          "type": "string"
        },
        "triggeredSelfHealingTaskId": {
          "type": "string"
        },
        "triggeredTaskReason": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/State1"
        },
        "recentlyDemotedBrokers": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "recentlyRemovedBrokers": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "numTotalLeadershipMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numCancelledLeadershipMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numPendingLeadershipMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numFinishedLeadershipMovements": {
          "type": "integer",
          "format": "int32"
        },
        "pendingLeadershipMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "cancelledLeadershipMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "maximumConcurrentLeaderMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numTotalPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numPendingPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numCancelledPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numInProgressPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "abortingPartitions": {
          "type": "integer",
          "format": "int32"
        },
        "numFinishedPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "inProgressPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "pendingPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "cancelledPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "deadPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "completedPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "abortingPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "abortedPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "finishedDataMovement": {
          "type": "integer",
          "format": "int64"
        },
        "totalDataToMove": {
          "type": "integer",
          "format": "int64"
        },
        "maximumConcurrentPartitionMovementsPerBroker": {
          "type": "integer",
          "format": "int32"
        },
        "numTotalIntraBrokerPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numFinishedIntraBrokerPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numInProgressIntraBrokerPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numAbortingIntraBrokerPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numPendingIntraBrokerPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "numCancelledIntraBrokerPartitionMovements": {
          "type": "integer",
          "format": "int32"
        },
        "inProgressIntraBrokerPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "pendingIntraBrokerPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "cancelledIntraBrokerPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "deadIntraBrokerPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "completedIntraBrokerPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "abortingIntraBrokerPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "abortedIntraBrokerPartitionMovement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionTask"
          }
        },
        "finishedIntraBrokerDataMovement": {
          "type": "integer",
          "format": "int64"
        },
        "totalIntraBrokerDataToMove": {
          "type": "integer",
          "format": "int64"
        },
        "maximumConcurrentIntraBrokerPartitionMovementsPerBroker": {
          "type": "integer",
          "format": "int32"
        },
        "error": {
          "type": "string"
        }
      },
      "required": [
        "state"
      ]
    },
    "ExecutionTask": {
      "title": "ExecutionTask",
      "type": "object",
      "properties": {
        "executionId": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/Type"
        },
        "state": {
          "$ref": "#/definitions/State2"
        },
        "proposal": {
          "$ref": "#/definitions/ExecutionProposal"
        },
        "brokerId": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "executionId",
        "type",
        "state",
        "proposal",
        "brokerId"
      ]
    },
    "GoalStatus": {
      "title": "GoalStatus",
      "type": "object",
      "properties": {
        "goal": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status2"
        },
        "clusterModelStats": {
          "$ref": "#/definitions/ClusterModelStats"
        }
      },
      "required": [
        "goal",
        "status",
        "clusterModelStats"
      ]
    },
    "LoadMonitorState": {
      "title": "LoadMonitorState",
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/State"
        },
        "trained": {
          "type": "boolean"
        },
        "trainingPct": {
          "type": "number",
          "format": "double"
        },
        "numMonitoredWindows": {
          "type": "number",
          "format": "double"
        },
        "monitoredWindows": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          }
        },
        "numValidPartitions": {
          "type": "number",
          "format": "double"
        },
        "numTotalPartitions": {
          "type": "number",
          "format": "double"
        },
        "monitoringCoveragePct": {
          "type": "number",
          "format": "double"
        },
        "numFlawedPartitions": {
          "type": "number",
          "format": "double"
        },
        "reasonOfLatestPauseOrResume": {
          "type": "string"
        },
        "bootstrapProgressPct": {
          "type": "number",
          "format": "double"
        },
        "loadingProgressPct": {
          "type": "number",
          "format": "double"
        },
        "error": {
          "type": "string"
        }
      },
      "required": [
        "state",
        "trained",
        "trainingPct",
        "numMonitoredWindows",
        "numValidPartitions",
        "numTotalPartitions",
        "monitoringCoveragePct",
        "numFlawedPartitions"
      ]
    },
    "OptimizationResult": {
      "title": "OptimizationResult",
      "type": "object",
      "properties": {
        "proposals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionProposal"
          }
        },
        "loadBeforeOptimization": {
          "$ref": "#/definitions/BrokerStats"
        },
        "summary": {
          "$ref": "#/definitions/OptimizerResult"
        },
        "goalSummary": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GoalStatus"
          }
        },
        "loadAfterOptimization": {
          "$ref": "#/definitions/BrokerStats"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "summary",
        "goalSummary",
        "loadAfterOptimization"
      ]
    },
    "OptimizerResult": {
      "title": "OptimizerResult",
      "type": "object",
      "properties": {
        "numReplicaMovements": {
          "type": "integer",
          "format": "int32"
        },
        "dataToMoveMB": {
          "type": "integer",
          "format": "int64"
        },
        "numIntraBrokerReplicaMovements": {
          "type": "integer",
          "format": "int32"
        },
        "intraBrokerDataToMoveMB": {
          "type": "integer",
          "format": "int64"
        },
        "numLeaderMovements": {
          "type": "integer",
          "format": "int32"
        },
        "recentWindows": {
          "type": "integer",
          "format": "int32"
        },
        "monitoredPartitionsPercentage": {
          "type": "number",
          "format": "double"
        },
        "excludedTopics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludedBrokersForReplicaMove": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "excludedBrokersForLeadership": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "onDemandBalancednessScoreBefore": {
          "type": "number",
          "format": "double"
        },
        "onDemandBalancednessScoreAfter": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "numReplicaMovements",
        "dataToMoveMB",
        "numIntraBrokerReplicaMovements",
        "intraBrokerDataToMoveMB",
        "numLeaderMovements",
        "recentWindows",
        "monitoredPartitionsPercentage",
        "excludedTopics",
        "excludedBrokersForReplicaMove",
        "excludedBrokersForLeadership",
        "onDemandBalancednessScoreBefore",
        "onDemandBalancednessScoreAfter"
      ]
    },
    "PartitionLoadState": {
      "title": "PartitionLoadState",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartitionLoadRecord"
          }
        }
      },
      "required": [
        "version",
        "records"
      ]
    },
    "PartitionLoadRecord": {
      "title": "PartitionLoadRecord",
      "type": "object",
      "properties": {
        "topic": {
          "type": "string"
        },
        "partition": {
          "type": "integer",
          "format": "int32"
        },
        "leader": {
          "type": "integer",
          "format": "int32"
        },
        "followers": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "cpu": {
          "type": "integer",
          "format": "int32"
        },
        "networkInbound": {
          "type": "integer",
          "format": "int32"
        },
        "networkOutbound": {
          "type": "integer",
          "format": "int32"
        },
        "disk": {
          "type": "integer",
          "format": "int32"
        },
        "msg_in": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "topic",
        "partition",
        "leader",
        "followers",
        "cpu",
        "networkInbound",
        "networkOutbound",
        "disk",
        "msg_in"
      ]
    },
    "PauseSamplingResult": {
      "title": "PauseSamplingResult",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "version",
        "message"
      ]
    },
    "ProgressResult": {
      "title": "ProgressResult",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "progress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationProgress"
          }
        }
      },
      "required": [
        "version",
        "progress"
      ]
    },
    "OperationProgress": {
      "title": "OperationProgress",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "operation": {
          "type": "string"
        },
        "operationProgress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepProgress"
          }
        }
      },
      "required": [
        "version",
        "operation",
        "operationProgress"
      ]
    },
    "StepProgress": {
      "title": "StepProgress",
      "type": "object",
      "properties": {
        "step": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "time-in-ms": {
          "type": "integer",
          "format": "int64"
        },
        "completionPercentage": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "step",
        "description",
        "time-in-ms",
        "completionPercentage"
      ]
    },
    "ResumeSamplingResult": {
      "title": "ResumeSamplingResult",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "version",
        "message"
      ]
    },
    "ReviewResult": {
      "title": "ReviewResult",
      "type": "object",
      "properties": {
        "RequestInfo": {
          "$ref": "#/definitions/RequestInfo"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "RequestInfo"
      ]
    },
    "RequestInfo": {
      "title": "RequestInfo",
      "type": "object",
      "properties": {
        "Id": {
          "type": "integer",
          "format": "int32"
        },
        "SubmitterAddress": {
          "type": "string"
        },
        "SubmissionTimeMs": {
          "type": "integer",
          "format": "int64"
        },
        "Status": {
          "$ref": "#/definitions/Status3"
        },
        "EndpointWithParams": {
          "type": "string"
        },
        "Reason": {
          "type": "string"
        }
      },
      "required": [
        "Id",
        "SubmitterAddress",
        "SubmissionTimeMs",
        "Status",
        "EndpointWithParams",
        "Reason"
      ]
    },
    "Statistic": {
      "title": "Statistic",
      "type": "object",
      "properties": {
        "potentialNwOut": {
          "type": "number",
          "format": "double"
        },
        "replicas": {
          "type": "integer",
          "format": "int32"
        },
        "leaderReplicas": {
          "type": "integer",
          "format": "int32"
        },
        "topicReplicas": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "StopProposalResult": {
      "title": "StopProposalResult",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "version",
        "message"
      ]
    },
    "TrainResult": {
      "title": "TrainResult",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "version",
        "message"
      ]
    },
    "UserTaskInfo": {
      "title": "UserTaskInfo",
      "type": "object",
      "properties": {
        "UserTaskId": {
          "type": "string"
        },
        "RequestURL": {
          "type": "string"
        },
        "ClientIdentity": {
          "type": "string"
        },
        "StartMs": {
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/Status4"
        },
        "originalResponse": {
          "type": "string"
        }
      },
      "required": [
        "UserTaskId",
        "RequestURL",
        "ClientIdentity",
        "StartMs",
        "Status"
      ]
    },
    "UserTaskState": {
      "title": "UserTaskState",
      "type": "object",
      "properties": {
        "userTasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserTaskInfo"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "userTasks",
        "version"
      ]
    },
    "BrokerState": {
      "title": "BrokerState",
      "type": "string",
      "enum": [
        "ALIVE",
        "DEAD",
        "NEW",
        "DEMOTED",
        "BAD_DISKS"
      ]
    },
    "data_from": {
      "title": "data_from",
      "type": "string",
      "enum": [
        "VALID_WINDOWS",
        "VALID_PARTITIONS"
      ]
    },
    "disable_self_healing_for": {
      "title": "disable_self_healing_for",
      "type": "string",
      "enum": [
        "GOAL_VIOLATION",
        "BROKER_FAILURE",
        "METRIC_ANOMALY",
        "DISK_FAILURE",
        "TOPIC_ANOMALY"
      ]
    },
    "enable_self_healing_for": {
      "title": "enable_self_healing_for",
      "type": "string",
      "enum": [
        "GOAL_VIOLATION",
        "BROKER_FAILURE",
        "METRIC_ANOMALY",
        "DISK_FAILURE",
        "TOPIC_ANOMALY"
      ]
    },
    "resource": {
      "title": "resource",
      "type": "string",
      "enum": [
        "cpu",
        "networkInbound",
        "networkOutbound",
        "disk"
      ]
    },
    "State": {
      "title": "State",
      "type": "string",
      "enum": [
        "NOT_STARTED",
        "RUNNING",
        "PAUSED",
        "SAMPLING",
        "BOOTSTRAPPING",
        "TRAINING",
        "LOADING"
      ]
    },
    "State1": {
      "title": "State1",
      "type": "string",
      "enum": [
        "NO_TASK_IN_PROGRESS",
        "STARTING_EXECUTION",
        "INTER_BROKER_REPLICA_MOVEMENT_TASK_IN_PROGRESS",
        "INTRA_BROKER_REPLICA_MOVEMENT_TASK_IN_PROGRESS",
        "LEADER_MOVEMENT_TASK_IN_PROGRESS",
        "STOPPING_EXECUTION"
      ]
    },
    "State2": {
      "title": "State2",
      "type": "string",
      "enum": [
        "PENDING",
        "IN_PROGRESS",
        "ABORTING",
        "ABORTED",
        "DEAD",
        "COMPLETED"
      ]
    },
    "Status": {
      "title": "Status",
      "type": "string",
      "enum": [
        "ready",
        "notReady"
      ]
    },
    "Status1": {
      "title": "Status1",
      "type": "string",
      "enum": [
        "DETECTED",
        "IGNORED",
        "FIX_STARTED",
        "FIX_FAILED_TO_START",
        "CHECK_WITH_DELAY",
        "LOAD_MONITOR_NOT_READY",
        "COMPLETENESS_NOT_READY"
      ]
    },
    "Status2": {
      "title": "Status2",
      "type": "string",
      "enum": [
        "VIOLATED",
        "FIXED",
        "NO-ACTION"
      ]
    },
    "Status3": {
      "title": "Status3",
      "type": "string",
      "enum": [
        "PENDING_REVIEW",
        "APPROVED",
        "SUBMITTED",
        "DISCARDED"
      ]
    },
    "Status4": {
      "title": "Status4",
      "type": "string",
      "enum": [
        "Active",
        "InExecution",
        "Completed",
        "CompletedWithError"
      ]
    },
    "substate": {
      "title": "substate",
      "type": "string",
      "enum": [
        "executor",
        "analyzer",
        "monitor",
        "anomaly_detector"
      ]
    },
    "Type": {
      "title": "Type",
      "type": "string",
      "enum": [
        "INTER_BROKER_REPLICA_ACTION",
        "INTRA_BROKER_REPLICA_ACTION",
        "LEADER_ACTION"
      ]
    }
  },
  "tags": []
}