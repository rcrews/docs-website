{
  "swagger" : "2.0",
  "info" : {
    "description" : "This REST API provides remote access to the EFM Server.\n                                            Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.",
    "version" : "1.1.0-SNAPSHOT",
    "title" : "Cloudera Edge Flow Manager REST API",
    "license" : {
      "name" : "GNU Affero General Public License (AGPL), Version 3",
      "url" : "https://www.gnu.org/licenses/agpl-3.0.en.html"
    }
  },
  "basePath" : "/efm/api",
  "tags" : [ {
    "name" : "Access",
    "description" : "Check the access status of the current user"
  }, {
    "name" : "Agent Classes",
    "description" : "Register and manage agent class definitions"
  }, {
    "name" : "Agent Manifests",
    "description" : "Register and manage agent manifest definitions"
  }, {
    "name" : "Agents",
    "description" : "Register and manage MiNiFi agents"
  }, {
    "name" : "C2 Configuration",
    "description" : "Retrieve information about the configuration of the C2 server"
  }, {
    "name" : "C2 Protocol",
    "description" : "An HTTP RESTful implementation of the MiNiFi C2 protocol."
  }, {
    "name" : "Events",
    "description" : "Retrieval of events"
  }, {
    "name" : "Flow Designer"
  }, {
    "name" : "Flow Designer Parameters"
  }, {
    "name" : "Flow Mappings",
    "description" : "Creating and retrieval of flow mappings. These are BETA endpoints as flow mappings are expected to be internally managed by the server."
  }, {
    "name" : "Flows",
    "description" : "Creation and retrieval of flows"
  }, {
    "name" : "Heartbeats",
    "description" : "View heartbeats from agents"
  }, {
    "name" : "Monitoring"
  }, {
    "name" : "Operations",
    "description" : "Submit and manage C2 operations targeting MiNiFi Agents"
  }, {
    "name" : "Parameter Mappings"
  }, {
    "name" : "Parameters"
  } ],
  "schemes" : [ "http", "https" ],
  "paths" : {
    "/access" : {
      "get" : {
        "tags" : [ "Access" ],
        "summary" : "Returns the current client's authenticated identity. [BETA]",
        "description" : "",
        "operationId" : "getAccessStatus",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CurrentUser"
            }
          }
        }
      }
    },
    "/agent-classes" : {
      "get" : {
        "tags" : [ "Agent Classes" ],
        "summary" : "Get all MiNiFi agent classes that are registered with this C2 server. [BETA]",
        "description" : "",
        "operationId" : "getAgentClasses",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AgentClass"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Agent Classes" ],
        "summary" : "Register a MiNiFi agent class with this C2 server",
        "description" : "This can also be done with a heartbeat, which will register a MiNiFi agent class the first time it is seen in a heartbeat.",
        "operationId" : "createAgentClass",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The class to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AgentClass"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentClass"
            }
          }
        }
      }
    },
    "/agent-classes/{name}" : {
      "get" : {
        "tags" : [ "Agent Classes" ],
        "summary" : "Get a MiNiFi agent class that is registered with this C2 server",
        "description" : "",
        "operationId" : "getAgentClass",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the class to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentClass"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Agent Classes" ],
        "summary" : "Update a MiNiFi agent class by replacing it in full",
        "description" : "",
        "operationId" : "replaceAgentClass",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the class",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The metadata of the class to associate with the given name.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AgentClass"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentClass"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Agent Classes" ],
        "summary" : "Delete a MiNiFi agent class",
        "description" : "",
        "operationId" : "deleteAgentClass",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the class to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentClass"
            }
          }
        }
      }
    },
    "/agent-manifests" : {
      "get" : {
        "tags" : [ "Agent Manifests" ],
        "summary" : "Get all agent manifests. [BETA]",
        "description" : "",
        "operationId" : "getAgentManifests",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "class",
          "in" : "query",
          "description" : "Optionally, filter the results to match a class label",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AgentManifest"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Agent Manifests" ],
        "summary" : "Upload an agent manifest",
        "description" : "",
        "operationId" : "createAgentManifest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "class",
          "in" : "query",
          "description" : "Optionally, a class label to associate with the manifest being uploaded",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AgentManifest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentManifest"
            }
          }
        }
      }
    },
    "/agent-manifests/{id}" : {
      "get" : {
        "tags" : [ "Agent Manifests" ],
        "summary" : "Get the agent manifest specified by the id",
        "description" : "",
        "operationId" : "getAgentManifest",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentManifest"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Agent Manifests" ],
        "summary" : "Delete the agent manifest specified by id",
        "description" : "",
        "operationId" : "deleteAgentManifest",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentManifest"
            }
          }
        }
      }
    },
    "/agents" : {
      "get" : {
        "tags" : [ "Agents" ],
        "summary" : "Get all MiNiFi agents known to this C2 Server. [BETA]",
        "description" : "",
        "operationId" : "getAgents",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Agent"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Agents" ],
        "summary" : "Register a MiNiFi agent with this C2 server",
        "description" : "This can also be done with a heartbeat, which will register a MiNiFi agent the first time it is seen in a heartbeat.",
        "operationId" : "createAgent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The metadata of the agent to register",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AgentInfo"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentInfo"
            }
          }
        }
      }
    },
    "/agents/{id}" : {
      "get" : {
        "tags" : [ "Agents" ],
        "summary" : "Retrieve info for a MiNiFi agent registered with this C2 server",
        "description" : "",
        "operationId" : "getAgent",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the agent to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Agent"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Agents" ],
        "summary" : "Delete an agent registered with this C2 server",
        "description" : "",
        "operationId" : "deleteAgent",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the agent to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Agent"
            }
          }
        }
      }
    },
    "/agents/{id}/parameters" : {
      "get" : {
        "tags" : [ "Agents" ],
        "summary" : "Retrieve the parameter context for a MiNiFi agent with the specified id",
        "description" : "",
        "operationId" : "getAgentParameters",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the agent to retrieve parameters for",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ParameterContext"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Agents" ],
        "summary" : "Register a set of Parameters to use with this agent.",
        "description" : "",
        "operationId" : "createAgentParameters",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the agent to provide parameters for",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The metadata of the agent to register",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Parameter"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ParameterContext"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Agents" ],
        "summary" : "Delete an instance specific parameter context",
        "description" : "",
        "operationId" : "deleteAgentParameters",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the agent to delete its parameter context",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ParameterContext"
            }
          }
        }
      }
    },
    "/c2-configuration" : {
      "get" : {
        "tags" : [ "C2 Configuration" ],
        "summary" : "Get general information about the configuration of the C2 server",
        "description" : "",
        "operationId" : "getC2ConfigurationInfo",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/C2ConfigurationInfo"
            }
          }
        }
      }
    },
    "/c2-configuration/nifi-registry" : {
      "get" : {
        "tags" : [ "C2 Configuration" ],
        "summary" : "Get information about the NiFi Registry that the C2 server is configured with",
        "description" : "",
        "operationId" : "getNiFiRegistryInfo",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NiFiRegistryInfo"
            }
          }
        }
      }
    },
    "/c2-protocol/acknowledge" : {
      "post" : {
        "tags" : [ "C2 Protocol" ],
        "summary" : "An endpoint for a MiNiFi Agent to send an operation acknowledgement to the C2 server",
        "description" : "",
        "operationId" : "acknowledge",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C2OperationAck"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "MiNiFi C2 server was unable to complete the request because it was invalid. The request should not be retried without modification."
          }
        }
      }
    },
    "/c2-protocol/heartbeat" : {
      "post" : {
        "tags" : [ "C2 Protocol" ],
        "summary" : "An endpoint for a MiNiFi Agent to send a heartbeat to the C2 server",
        "description" : "",
        "operationId" : "heartbeat",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C2Heartbeat"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/C2HeartbeatResponse"
            }
          },
          "400" : {
            "description" : "MiNiFi C2 server was unable to complete the request because it was invalid. The request should not be retried without modification."
          }
        }
      }
    },
    "/designer/client-id" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Gets a client id to use with the designer endpoints",
        "description" : "",
        "operationId" : "getClientId",
        "produces" : [ "text/plain" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/designer/flows" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Gets the available flows known to the flow designer",
        "description" : "",
        "operationId" : "getFlows",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListContainer"
            }
          }
        }
      }
    },
    "/designer/flows/summaries" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Gets the summaries of the available flows known to the flow designer",
        "description" : "",
        "operationId" : "getFlowSummaries",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListContainer"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Gets the flow with the given id",
        "description" : "",
        "operationId" : "getFlow",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDFlow"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Deletes the flow with the given id",
        "description" : "",
        "operationId" : "deleteFlow",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDFlowMetadata"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/connections/{connectionId}" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Retrieves the connection with the given id in the given flow",
        "description" : "",
        "operationId" : "getConnection",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDConnection"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Updates the connection with the given id in the given flow",
        "description" : "",
        "operationId" : "updateConnection",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The connection configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDConnection"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDConnection"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Deletes the connection with the given id in the given flow",
        "description" : "",
        "operationId" : "deleteConnection",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "The revision is used to verify the client is working with the latest version of the flow.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientId",
          "in" : "query",
          "description" : "If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDConnection"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/controller-services/{controllerServiceId}" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Retrieves the controller service with the given id in the given flow",
        "description" : "",
        "operationId" : "getControllerService",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "controllerServiceId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDControllerService"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Updates the controller service with the given id in the given flow",
        "description" : "",
        "operationId" : "updateControllerService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "controllerServiceId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The controller service configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDControllerService"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDControllerService"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Deletes the controller service with the given id in the given flow",
        "description" : "",
        "operationId" : "deleteControllerService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "controllerServiceId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "The revision is used to verify the client is working with the latest version of the flow.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientId",
          "in" : "query",
          "description" : "If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDControllerService"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/controller-services/{controllerServiceId}/descriptors/{propertyName}" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Retrieves the property descriptor with the given name for the given service in the given flow",
        "description" : "",
        "operationId" : "getControllerServicePropertyDescriptor",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "controllerServiceId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "propertyName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDPropertyDescriptor"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/events" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Gets the flow events for the flow with the given id",
        "description" : "",
        "operationId" : "getFlowEvents",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListContainer"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/expression-language-spec" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Gets the expression language specification for the agent class of the given flow",
        "description" : "",
        "operationId" : "getELSpecification",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ELSpecification"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/funnels/{funnelId}" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Retrieves the funnel with the given id in the given flow",
        "description" : "",
        "operationId" : "getFunnel",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "funnelId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDFunnel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Updates the funnel with the given id in the given flow",
        "description" : "",
        "operationId" : "updateFunnel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "funnelId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The funnel configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDFunnel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDFunnel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Deletes the funnel with the given id in the given flow",
        "description" : "",
        "operationId" : "deleteFunnel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "funnelId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "The revision is used to verify the client is working with the latest version of the flow.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientId",
          "in" : "query",
          "description" : "If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDFunnel"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/metadata" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Gets the flow metadata for the flow with the given id",
        "description" : "",
        "operationId" : "getFlowMetadata",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDFlowMetadata"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/process-groups/{pgId}" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Retrieves the process group with the given id. The alias of 'root' may be used to retrieve the root process group for the given flow.",
        "description" : "",
        "operationId" : "getProcessGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pgId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "includeChildren",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDProcessGroup"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Updates the configuration of a process group. The alias of 'root' may be used to retrieve the root process group for the given flow.",
        "description" : "",
        "operationId" : "updateProcessGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pgId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "processGroup",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDProcessGroup"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDProcessGroup"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/process-groups/{pgId}/connections" : {
      "post" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Creates a connection in the given process group",
        "description" : "",
        "operationId" : "createConnection",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pgId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDConnection"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDConnection"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/process-groups/{pgId}/controller-services" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Retrieves the controller service with the given id in the given flow",
        "description" : "",
        "operationId" : "getControllerServices",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pgId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListContainer"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Creates a controller service in the given process group",
        "description" : "",
        "operationId" : "createControllerService",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pgId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDControllerService"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDControllerService"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/process-groups/{pgId}/funnels" : {
      "post" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Creates a funnel in the given process group",
        "description" : "",
        "operationId" : "createFunnel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pgId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDFunnel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDFunnel"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/process-groups/{pgId}/processors" : {
      "post" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Creates a processor in the given process group",
        "description" : "",
        "operationId" : "createProcessor",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pgId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The processor configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDProcessor"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDProcessor"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/process-groups/{pgId}/remote-process-groups" : {
      "post" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Creates a remote process group in the given process group",
        "description" : "",
        "operationId" : "createRemoteProcessGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pgId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDRemoteProcessGroup"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDRemoteProcessGroup"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/processors/{processorId}" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Retrieves the processor with the given id in the given flow",
        "description" : "",
        "operationId" : "getProcessor",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "processorId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDProcessor"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Updates the processor with the given id in the given flow",
        "description" : "",
        "operationId" : "updateProcessor",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "processorId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The processor configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDProcessor"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDProcessor"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Deletes the processor with the given id in the given flow",
        "description" : "",
        "operationId" : "deleteProcessor",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "processorId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "The revision is used to verify the client is working with the latest version of the flow.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientId",
          "in" : "query",
          "description" : "If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDProcessor"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/processors/{processorId}/descriptors/{propertyName}" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Retrieves the property descriptor with the given name from the given processor in the given flow",
        "description" : "",
        "operationId" : "getProcessorPropertyDescriptor",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "processorId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "propertyName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDPropertyDescriptor"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/publish" : {
      "post" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Publishes the current state of the flow to NiFi Registry",
        "description" : "",
        "operationId" : "publishFlow",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The metadata for publishing the flow, such as comments",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FDFlowPublishMetadata"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDVersionInfo"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/remote-process-groups/{remoteProcessGroupId}" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Retrieves the remote process group with the given id in the given flow",
        "description" : "",
        "operationId" : "getRemoteProcessGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "remoteProcessGroupId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDRemoteProcessGroup"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Updates the remote process group with the given id in the given flow",
        "description" : "",
        "operationId" : "updateRemoteProcessGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "remoteProcessGroupId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The remoteProcessGroup configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDRemoteProcessGroup"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDRemoteProcessGroup"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Deletes the remote process group with the given id in the given flow",
        "description" : "",
        "operationId" : "deleteRemoteProcessGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "remoteProcessGroupId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "The revision is used to verify the client is working with the latest version of the flow.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientId",
          "in" : "query",
          "description" : "If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDRemoteProcessGroup"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/revert" : {
      "post" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Reverts the current state of the flow to the last published version. If the flow has never been published, or has no changes to publish, then this will be a no-op.",
        "description" : "",
        "operationId" : "revertFlow",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDVersionInfo"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/types/controller-services" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Gets the available controller service types for the given flow",
        "description" : "",
        "operationId" : "getControllerServiceTypes",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDComponentTypes"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/types/processors" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Gets the available processor types for the given flow",
        "description" : "",
        "operationId" : "getProcessorTypes",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDComponentTypes"
            }
          }
        }
      }
    },
    "/designer/flows/{flowId}/version-info" : {
      "get" : {
        "tags" : [ "Flow Designer" ],
        "summary" : "Gets the version info for the flow with the given id",
        "description" : "",
        "operationId" : "getFlowVersionInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDVersionInfoResult"
            }
          }
        }
      }
    },
    "/designer/parameter-contexts" : {
      "get" : {
        "tags" : [ "Flow Designer Parameters" ],
        "summary" : "Gets all available parameter contexts",
        "description" : "",
        "operationId" : "getParameterContexts",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "pageNum",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListContainer"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Flow Designer Parameters" ],
        "summary" : "Create a parameter context",
        "description" : "",
        "operationId" : "createParameterContext",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The new parameter context",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDParameterContext"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDParameterContext"
            }
          }
        }
      }
    },
    "/designer/parameter-contexts/update-requests" : {
      "post" : {
        "tags" : [ "Flow Designer Parameters" ],
        "summary" : "Initiate a update request to apply a proposed change to a context",
        "description" : "This will initiate the process of updating all components that reference the specified Parameter Context. Performing update against an arbitrary number of components may be expensive and take significantly more time than many other REST API actions. As a result, this endpoint will immediately return a request resource, and the process of updating the necessary components will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to .../parameter-contexts/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to .../parameter-contexts/update-requests/{requestId}.",
        "operationId" : "submitUpdateRequest",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The update request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FDParameterContextUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDParameterContextUpdateRequest"
            }
          }
        }
      }
    },
    "/designer/parameter-contexts/update-requests/{requestId}" : {
      "get" : {
        "tags" : [ "Flow Designer Parameters" ],
        "summary" : "Retrieve the status of a update request",
        "description" : "",
        "operationId" : "getUpdateRequest",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "The update request id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDParameterContextUpdateRequest"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Flow Designer Parameters" ],
        "summary" : "Delete a completed request or cancel an in-progress request",
        "description" : "",
        "operationId" : "deleteUpdateRequest",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "The update request id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDParameterContextUpdateRequest"
            }
          }
        }
      }
    },
    "/designer/parameter-contexts/{id}" : {
      "get" : {
        "tags" : [ "Flow Designer Parameters" ],
        "summary" : "Gets a parameter context",
        "description" : "",
        "operationId" : "getParameterContext",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the parameter context",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDParameterContext"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Flow Designer Parameters" ],
        "summary" : "Delete a parameter context",
        "description" : "",
        "operationId" : "deleteParameterContext",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the parameter context",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FDParameterContext"
            }
          }
        }
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get events",
        "description" : "",
        "operationId" : "getEvents",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "pageNum",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListContainer"
            }
          }
        }
      }
    },
    "/events/fields" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Retrieves the available field names for searching or sorting events.",
        "description" : "",
        "operationId" : "getAvailableEventFields",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Fields"
            }
          }
        }
      }
    },
    "/events/{id}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get a specific event",
        "description" : "",
        "operationId" : "getEvent",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the event to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Event"
            }
          },
          "404" : {
            "description" : "The specified resource could not be found."
          }
        }
      }
    },
    "/flow-mappings" : {
      "get" : {
        "tags" : [ "Flow Mappings" ],
        "summary" : "Gets all flow mappings. [BETA]",
        "description" : "",
        "operationId" : "getAllFlowMappings",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowMappings"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Flow Mappings" ],
        "summary" : "Creates a flow mapping. [BETA]",
        "description" : "",
        "operationId" : "createFlowMapping",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The flow mapping to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FlowMapping"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/flow-mappings/{agentClassName}" : {
      "get" : {
        "tags" : [ "Flow Mappings" ],
        "summary" : "Gets a flow mapping for a given agent class. [BETA]",
        "description" : "",
        "operationId" : "getFlowMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentClassName",
          "in" : "path",
          "description" : "The name of the class to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowMapping"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Flow Mappings" ],
        "summary" : "Updates a flow mapping. [BETA]",
        "description" : "",
        "operationId" : "updateFlowMapping",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentClassName",
          "in" : "path",
          "description" : "The name of the class to update the mapping for",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The flow mapping to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FlowMapping"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowMapping"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Flow Mappings" ],
        "summary" : "Deletes a flow mapping. [BETA]",
        "description" : "",
        "operationId" : "deleteFlowMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentClassName",
          "in" : "path",
          "description" : "The name of the class to delete the mapping for",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowMapping"
            }
          }
        }
      }
    },
    "/flows" : {
      "get" : {
        "tags" : [ "Flows" ],
        "summary" : "Gets all flow summaries. [BETA]",
        "description" : "",
        "operationId" : "getAllFlowSummaries",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowSummaries"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Flows" ],
        "summary" : "Creates a C2 flow from a VersionedFlowSnapshot from NiFi Registry. [BETA]",
        "description" : "",
        "operationId" : "createFlowFromFlowSnapshot",
        "consumes" : [ "application/vnd.minifi-c2+json;version=1" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The flow snapshot containing the flow URI and VersionedFlowSnapshot",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FlowSnapshot"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowSummary"
            }
          }
        }
      }
    },
    "/flows/{id}" : {
      "get" : {
        "tags" : [ "Flows" ],
        "summary" : "Get a flow by id, the response will contain a JSON document with fields for all of the flow's metadata as well as the raw content of the flow embedded in a field",
        "description" : "",
        "operationId" : "getFlow",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a flow to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Flow"
            }
          }
        }
      }
    },
    "/flows/{id}/content" : {
      "get" : {
        "tags" : [ "Flows" ],
        "summary" : "Get a flow by id as a YAML formatted flow definition",
        "description" : "",
        "operationId" : "getFlowContentAsYaml",
        "produces" : [ "application/vnd.minifi-c2+yaml;version=2" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a flow to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "aid",
          "in" : "query",
          "description" : "The specific agent context to use with the requested flow.  This is overlaid over any class or flow values.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/heartbeats/{id}" : {
      "get" : {
        "tags" : [ "Heartbeats" ],
        "summary" : "Get a specific heartbeat",
        "description" : "",
        "operationId" : "getHeartbeat",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the heartbeat to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/C2Heartbeat"
            }
          },
          "404" : {
            "description" : "The specified resource could not be found."
          }
        }
      }
    },
    "/monitor/agent-classes/{agentClass}" : {
      "get" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Get agent class monitoring data",
        "description" : "",
        "operationId" : "getAgentClassDetail",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentClass",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentClassDetail"
            }
          }
        }
      }
    },
    "/monitor/agents/{agentId}" : {
      "get" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Get agent monitoring data",
        "description" : "",
        "operationId" : "getAgentDetail",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentDetail"
            }
          }
        }
      }
    },
    "/monitor/summaries" : {
      "get" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Get summaries of all agent classes",
        "description" : "",
        "operationId" : "getAgentClassSummaries",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "pageNum",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListContainer"
            }
          }
        }
      }
    },
    "/monitor/summaries/{agentClass}" : {
      "get" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Get summaries of all agent classes",
        "description" : "",
        "operationId" : "getAgentClassSummary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentClass",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentClassSummary"
            }
          }
        }
      }
    },
    "/operations" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Get all operations. [BETA]",
        "description" : "",
        "operationId" : "getOperations",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Operation"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Submit a request for a C2 operation targeting a MiNiFi agent",
        "description" : "",
        "operationId" : "createOperation",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The requested operation",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Operation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Operation"
            }
          },
          "400" : {
            "description" : "MiNiFi C2 server was unable to complete the request because it was invalid. The request should not be retried without modification."
          }
        }
      }
    },
    "/operations/{id}" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Get a specific operation",
        "description" : "",
        "operationId" : "getOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the operation to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Operation"
            }
          },
          "404" : {
            "description" : "The specified resource could not be found."
          }
        }
      },
      "put" : {
        "tags" : [ "Operations" ],
        "summary" : "Updates the state of an operation (other fields are ignored). [BETA]",
        "description" : "",
        "operationId" : "updateOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the operation for which to update state.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "An Operation object containing the new state.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Operation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Operation"
            }
          },
          "400" : {
            "description" : "MiNiFi C2 server was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          }
        }
      }
    },
    "/parameter-context-mappings/agent-classes/{agentClass}" : {
      "get" : {
        "tags" : [ "Parameter Mappings" ],
        "summary" : "Gets the parameter context mapping for a given agent class",
        "description" : "",
        "operationId" : "getAgentClassParameterContextMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentClass",
          "in" : "path",
          "description" : "The name of the agent class",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentClassParametersMapping"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Parameter Mappings" ],
        "summary" : "Clear a parameter context mapping for a given agent class",
        "description" : "",
        "operationId" : "deleteAgentClassParameterContextMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentClass",
          "in" : "path",
          "description" : "The name of the agent class",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentClassParametersMapping"
            }
          }
        }
      }
    },
    "/parameter-context-mappings/agent-classes/{agentClass}/{parameterContextId}" : {
      "put" : {
        "tags" : [ "Parameter Mappings" ],
        "summary" : "Assign a parameter context to an agent class",
        "description" : "",
        "operationId" : "putAgentClassParameterContextMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentClass",
          "in" : "path",
          "description" : "The name of the agent class",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "parameterContextId",
          "in" : "path",
          "description" : "The id of the parameter context",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentClassParametersMapping"
            }
          }
        }
      }
    },
    "/parameter-context-mappings/agents/{agentId}" : {
      "get" : {
        "tags" : [ "Parameter Mappings" ],
        "summary" : "Gets the parameter context mapping for a given agent",
        "description" : "",
        "operationId" : "getAgentParameterContextMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentId",
          "in" : "path",
          "description" : "The id of the agent",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentParametersMapping"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Parameter Mappings" ],
        "summary" : "Clear a parameter context mapping for a given agent",
        "description" : "",
        "operationId" : "deleteAgentParameterContextMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentId",
          "in" : "path",
          "description" : "The id of the agent",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentParametersMapping"
            }
          }
        }
      }
    },
    "/parameter-context-mappings/agents/{agentId}/{parameterContextId}" : {
      "put" : {
        "tags" : [ "Parameter Mappings" ],
        "summary" : "Assign a parameter context to an agent",
        "description" : "",
        "operationId" : "putAgentParameterContextMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentId",
          "in" : "path",
          "description" : "The id of the agent",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "parameterContextId",
          "in" : "path",
          "description" : "The id of the parameter context",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AgentParametersMapping"
            }
          }
        }
      }
    },
    "/parameter-context-mappings/flows/{flowId}" : {
      "get" : {
        "tags" : [ "Parameter Mappings" ],
        "summary" : "Gets the parameter context mapping for a given flow",
        "description" : "",
        "operationId" : "getFlowParameterContextMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "description" : "The id of the flow",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowParametersMapping"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Parameter Mappings" ],
        "summary" : "Clear a parameter context mapping for a given flow",
        "description" : "",
        "operationId" : "deleteFlowParameterContextMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "description" : "The id of the flow",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowParametersMapping"
            }
          }
        }
      }
    },
    "/parameter-context-mappings/flows/{flowId}/{parameterContextId}" : {
      "put" : {
        "tags" : [ "Parameter Mappings" ],
        "summary" : "Assign a parameter context to a flow",
        "description" : "",
        "operationId" : "putFlowParameterContextMapping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "description" : "The id of the flow",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "parameterContextId",
          "in" : "path",
          "description" : "The id of the parameter context",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FlowParametersMapping"
            }
          }
        }
      }
    },
    "/parameter-contexts" : {
      "get" : {
        "tags" : [ "Parameters" ],
        "summary" : "Gets all available parameter contexts",
        "description" : "",
        "operationId" : "getParameterContexts",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "pageNum",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "rows",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListContainer"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Parameters" ],
        "summary" : "Create a parameter context",
        "description" : "",
        "operationId" : "createParameterContext",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The new parameter context",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ParameterContext"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ParameterContext"
            }
          }
        }
      }
    },
    "/parameter-contexts/{id}" : {
      "get" : {
        "tags" : [ "Parameters" ],
        "summary" : "Gets a parameter context",
        "description" : "",
        "operationId" : "getParameterContext",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the parameter context",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ParameterContext"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Parameters" ],
        "summary" : "Update a parameter context",
        "description" : "",
        "operationId" : "updateParameterContext",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the parameter context",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The parameter context",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ParameterContext"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ParameterContext"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Parameters" ],
        "summary" : "Delete a parameter context",
        "description" : "",
        "operationId" : "deleteParameterContext",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the parameter context",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ParameterContext"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "Agent" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "A unique identifier for the agent"
        },
        "name" : {
          "type" : "string",
          "description" : "An optional human-friendly name or alias for the agent",
          "minLength" : 0,
          "maxLength" : 120
        },
        "agentClass" : {
          "type" : "string",
          "description" : "The class or category label of the agent, e.g., 'sensor-collector'",
          "minLength" : 0,
          "maxLength" : 200
        },
        "agentManifestId" : {
          "type" : "string",
          "description" : "The id of the agent manifest that applies to this agent."
        },
        "flowId" : {
          "type" : "string",
          "description" : "The id of the flow currently running on the agent"
        },
        "deviceId" : {
          "type" : "string",
          "description" : "The id of the device on which the agent resides"
        },
        "status" : {
          "description" : "A summary of the runtime status of the agent",
          "$ref" : "#/definitions/AgentStatus"
        },
        "state" : {
          "type" : "string",
          "description" : "The current state of the agent",
          "enum" : [ "ONLINE", "MISSING" ]
        },
        "firstSeen" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "A timestamp (milliseconds since Epoch) for the first time the agent was seen by this C2 server"
        },
        "lastSeen" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "A timestamp (milliseconds since Epoch) for the most recent time the was seen by this C2 server"
        }
      }
    },
    "AgentClass" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "A unique class name for the agent",
          "minLength" : 0,
          "maxLength" : 200
        },
        "description" : {
          "type" : "string",
          "description" : "An optional description of this agent class",
          "minLength" : 0,
          "maxLength" : 8000
        },
        "agentManifests" : {
          "type" : "array",
          "description" : "A list of agent manifest ids belonging to this class",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 1,
          "minItems" : 0
        }
      }
    },
    "AgentClassDetail" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the class"
        },
        "description" : {
          "type" : "string"
        },
        "agentManifests" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "flowSummary" : {
          "description" : "Metadata about the flow assigned to the agent class",
          "$ref" : "#/definitions/FlowSummary"
        },
        "detailMetrics" : {
          "description" : "Detailed monitoring metrics for the agent class (all values averages)",
          "$ref" : "#/definitions/DetailMetrics"
        },
        "links" : {
          "$ref" : "#/definitions/AgentClassDetailLinks"
        }
      }
    },
    "AgentClassDetailLinks" : {
      "type" : "object",
      "properties" : {
        "flow" : {
          "description" : "Link to the flow mapped to this agent class",
          "$ref" : "#/definitions/Link"
        },
        "agents" : {
          "description" : "Link to the event details, if applicable",
          "$ref" : "#/definitions/Link"
        },
        "events" : {
          "description" : "Link to the events associated with this agent class",
          "$ref" : "#/definitions/Link"
        },
        "dashboard" : {
          "description" : "Link to the external dashboard associated with this agent class",
          "$ref" : "#/definitions/Link"
        },
        "self" : {
          "description" : "Link to this resource entity",
          "$ref" : "#/definitions/Link"
        },
        "other" : {
          "type" : "array",
          "description" : "List of other rel links that have been set",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "AgentClassMetrics" : {
      "type" : "object",
      "properties" : {
        "agentCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "missingAgentCount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "AgentClassParametersMapping" : {
      "type" : "object",
      "properties" : {
        "agentClass" : {
          "type" : "string"
        },
        "parameterContextId" : {
          "type" : "string"
        }
      }
    },
    "AgentClassSummary" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the class"
        },
        "flowSummary" : {
          "description" : "Metadata about the flow assigned to the agent class",
          "$ref" : "#/definitions/FlowSummary"
        },
        "agentClassMetrics" : {
          "$ref" : "#/definitions/AgentClassMetrics"
        },
        "latestOperation" : {
          "$ref" : "#/definitions/BulkOperation"
        },
        "links" : {
          "$ref" : "#/definitions/AgentClassSummaryLinks"
        }
      }
    },
    "AgentClassSummaryLinks" : {
      "type" : "object",
      "properties" : {
        "flow" : {
          "description" : "Link to the flow mapped to this agent class",
          "$ref" : "#/definitions/Link"
        },
        "alerts" : {
          "description" : "Link to the alerts for the agent class",
          "$ref" : "#/definitions/Link"
        },
        "details" : {
          "description" : "Link to the detailed agent class monitoring data",
          "$ref" : "#/definitions/Link"
        },
        "self" : {
          "description" : "Link to this resource entity",
          "$ref" : "#/definitions/Link"
        },
        "other" : {
          "type" : "array",
          "description" : "List of other rel links that have been set",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "AgentDetail" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "A unique identifier for the agent"
        },
        "name" : {
          "type" : "string",
          "description" : "An optional, human-friendly name or alias for the agent"
        },
        "agentClass" : {
          "type" : "string",
          "description" : "The class or category label of the agent, e.g., 'sensor-collector'"
        },
        "agentManifestId" : {
          "type" : "string",
          "description" : "The id of the manifest that applies to this agent."
        },
        "firstSeen" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "A timestamp (milliseconds since Epoch) for the first time the agent was seen by this C2 server"
        },
        "lastSeen" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "A timestamp (milliseconds since Epoch) for the most recent time the was seen by this C2 server"
        },
        "location" : {
          "description" : "The last reported location of agent",
          "$ref" : "#/definitions/Location"
        },
        "agentType" : {
          "type" : "string",
          "description" : "The type of the agent binary, e.g., Java or C++ or NanoFi"
        },
        "deviceInfo" : {
          "description" : "Details about the device on which the agent is running",
          "$ref" : "#/definitions/DeviceInfo"
        },
        "flowSummary" : {
          "description" : "Metadata about the flow running the agent",
          "$ref" : "#/definitions/FlowSummary"
        },
        "detailMetrics" : {
          "description" : "Detailed monitoring metrics for the agent",
          "$ref" : "#/definitions/DetailMetrics"
        },
        "links" : {
          "description" : "Links to related entities",
          "$ref" : "#/definitions/AgentDetailLinks"
        }
      }
    },
    "AgentDetailLinks" : {
      "type" : "object",
      "properties" : {
        "flow" : {
          "description" : "Link to the flow deployed to this agent",
          "$ref" : "#/definitions/Link"
        },
        "events" : {
          "description" : "Link to the events associated with this agent",
          "$ref" : "#/definitions/Link"
        },
        "dashboard" : {
          "description" : "Link to the external dashboard associated with this agent",
          "$ref" : "#/definitions/Link"
        },
        "agentClass" : {
          "description" : "Link to the agent class",
          "$ref" : "#/definitions/Link"
        },
        "self" : {
          "description" : "Link to this resource entity",
          "$ref" : "#/definitions/Link"
        },
        "other" : {
          "type" : "array",
          "description" : "List of other rel links that have been set",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "AgentInfo" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "A unique identifier for the Agent"
        },
        "agentClass" : {
          "type" : "string",
          "description" : "The class or category label of the agent, e.g., 'sensor-collector'"
        },
        "agentManifest" : {
          "description" : "The specification of the agent's capabilities",
          "$ref" : "#/definitions/AgentManifest"
        },
        "status" : {
          "description" : "A summary of the runtime status of the agent",
          "$ref" : "#/definitions/AgentStatus"
        }
      }
    },
    "AgentManifest" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "A unique identifier for the manifest"
        },
        "agentType" : {
          "type" : "string",
          "description" : "The type of the agent binary, e.g., 'minifi-java' or 'minifi-cpp'"
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the agent binary, e.g., '1.0.1'"
        },
        "buildInfo" : {
          "description" : "Build summary for this agent binary",
          "$ref" : "#/definitions/BuildInfo"
        },
        "bundles" : {
          "type" : "array",
          "description" : "All extension bundles included with this agent",
          "items" : {
            "$ref" : "#/definitions/Bundle"
          }
        },
        "componentManifest" : {
          "description" : "All components of this agent that are not part of a bundle.",
          "$ref" : "#/definitions/ComponentManifest"
        },
        "schedulingDefaults" : {
          "description" : "Scheduling defaults for components defined in this manifest",
          "$ref" : "#/definitions/SchedulingDefaults"
        }
      }
    },
    "AgentParametersMapping" : {
      "type" : "object",
      "properties" : {
        "agentId" : {
          "type" : "string"
        },
        "parameterContextId" : {
          "type" : "string"
        }
      }
    },
    "AgentRepositories" : {
      "type" : "object",
      "properties" : {
        "flowfile" : {
          "$ref" : "#/definitions/AgentRepositoryStatus"
        },
        "provenance" : {
          "$ref" : "#/definitions/AgentRepositoryStatus"
        }
      }
    },
    "AgentRepositoryStatus" : {
      "type" : "object",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of items in the repository",
          "minimum" : 0,
          "maximum" : 9223372036854775807
        },
        "sizeMax" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The maximum number of items the repository is capable of storing",
          "minimum" : 0,
          "maximum" : 9223372036854775807
        },
        "dataSize" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The data size (in Bytes) of all items in the repository",
          "minimum" : 0,
          "maximum" : 9223372036854775807
        },
        "dataSizeMax" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The maximum data size (in Bytes) that the repository is capable of storing",
          "minimum" : 0,
          "maximum" : 9223372036854775807
        }
      }
    },
    "AgentStatus" : {
      "type" : "object",
      "properties" : {
        "uptime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of milliseconds since the agent started."
        },
        "repositories" : {
          "description" : "Status and metrics for the agent repositories",
          "$ref" : "#/definitions/AgentRepositories"
        },
        "components" : {
          "type" : "object",
          "description" : "Status and for shared agent components (that is, components that exist outside the context of a specific flow).",
          "additionalProperties" : {
            "$ref" : "#/definitions/ComponentStatus"
          }
        }
      }
    },
    "BatchSize" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Preferred number of flow files to include in a transaction."
        },
        "size" : {
          "type" : "string",
          "description" : "Preferred number of bytes to include in a transaction."
        },
        "duration" : {
          "type" : "string",
          "description" : "Preferred amount of time that a transaction should span."
        }
      }
    },
    "Bucket" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "link" : {
          "description" : "An WebLink to this entity.",
          "readOnly" : true,
          "$ref" : "#/definitions/JaxbLink"
        },
        "identifier" : {
          "type" : "string",
          "description" : "An ID to uniquely identify this object.",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the bucket."
        },
        "createdTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp of when the bucket was first created. This is set by the server at creation time.",
          "readOnly" : true,
          "minimum" : 1
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the bucket."
        },
        "allowBundleRedeploy" : {
          "type" : "boolean",
          "description" : "Indicates if this bucket allows the same version of an extension bundle to be redeployed and thus overwrite the existing artifact. By default this is false."
        },
        "permissions" : {
          "description" : "The access that the current user has to this bucket.",
          "readOnly" : true,
          "$ref" : "#/definitions/Permissions"
        }
      }
    },
    "BuildInfo" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string",
          "description" : "The version number of the built component."
        },
        "revision" : {
          "type" : "string",
          "description" : "The SCM revision id of the source code used for this build."
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp (milliseconds since Epoch) of the build."
        },
        "targetArch" : {
          "type" : "string",
          "description" : "The target architecture of the built component."
        },
        "compiler" : {
          "type" : "string",
          "description" : "The compiler used for the build"
        },
        "compilerFlags" : {
          "type" : "string",
          "description" : "The compiler flags used for the build."
        }
      }
    },
    "BulkOperation" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the bulk operation"
        },
        "agentClass" : {
          "type" : "string",
          "description" : "The target agent class for the bulk operation"
        },
        "state" : {
          "type" : "string",
          "description" : "The current state of the bulk operation",
          "enum" : [ "NEW", "READY", "IN_PROGRESS", "DONE", "FAILED", "CANCELLED" ]
        },
        "progress" : {
          "description" : "The current progress of the bulk operation",
          "$ref" : "#/definitions/BulkOperationProgress"
        }
      }
    },
    "BulkOperationProgress" : {
      "type" : "object",
      "properties" : {
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The target number of deployment operations to complete"
        },
        "successful" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of deployment operations that have completed successfully"
        },
        "failed" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of deployment operations that have failed"
        },
        "canceled" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of deployment operations that have been canceled"
        },
        "completed" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The total number of completed operations (successful + failed + canceled)"
        },
        "progress" : {
          "type" : "number",
          "format" : "double",
          "description" : "The ratio of completed operations to total operations represented as a decimal between 0 and 1"
        }
      }
    },
    "Bundle" : {
      "type" : "object",
      "properties" : {
        "group" : {
          "type" : "string",
          "description" : "The group of the bundle"
        },
        "artifact" : {
          "type" : "string",
          "description" : "The artifact of the bundle"
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the bundle"
        }
      }
    },
    "C2ConfigurationInfo" : {
      "type" : "object",
      "properties" : {
        "webHost" : {
          "type" : "string"
        },
        "webPort" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "C2Heartbeat" : {
      "type" : "object",
      "properties" : {
        "deviceInfo" : {
          "description" : "Metadata for the device",
          "$ref" : "#/definitions/DeviceInfo"
        },
        "agentInfo" : {
          "description" : "Metadata for the agent installed on the device",
          "$ref" : "#/definitions/AgentInfo"
        },
        "flowInfo" : {
          "description" : "Metadata for the flow currently deployed to the agent",
          "$ref" : "#/definitions/FlowInfo"
        }
      }
    },
    "C2HeartbeatResponse" : {
      "type" : "object",
      "properties" : {
        "requestedOperations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/C2Operation"
          }
        }
      }
    },
    "C2Operation" : {
      "type" : "object",
      "required" : [ "operation" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "A unique identifier for the operation",
          "readOnly" : true
        },
        "operation" : {
          "type" : "string",
          "description" : "The type of operation",
          "enum" : [ "ACKNOWLEDGE", "HEARTBEAT", "CLEAR", "DESCRIBE", "UPDATE", "RESTART", "START", "STOP" ]
        },
        "operand" : {
          "type" : "string",
          "description" : "The primary operand of the operation"
        },
        "args" : {
          "type" : "object",
          "description" : "If the operation requires arguments ",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "dependencies" : {
          "type" : "array",
          "description" : "Optional set of operation ids that this operation depends on. Executing this operation is conditional on the success of all dependency operations.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "C2OperationAck" : {
      "type" : "object",
      "properties" : {
        "operationId" : {
          "type" : "string",
          "description" : "The id of the requested operation that is being acknowledged"
        },
        "operationState" : {
          "description" : "The agent's status response for this operation ID",
          "$ref" : "#/definitions/C2OperationState"
        }
      }
    },
    "C2OperationState" : {
      "type" : "object",
      "required" : [ "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "example" : "FULLY_APPLIED",
          "description" : "State of the operation performed",
          "enum" : [ "FULLY_APPLIED", "PARTIALLY_APPLIED", "OPERATION_NOT_UNDERSTOOD", "NOT_APPLIED" ]
        },
        "details" : {
          "type" : "string",
          "example" : "Operation failed due to missing processor(s)",
          "description" : "Additional details about the state"
        }
      }
    },
    "ComponentManifest" : {
      "type" : "object",
      "properties" : {
        "apis" : {
          "type" : "array",
          "description" : "Public interfaces defined in this bundle",
          "items" : {
            "$ref" : "#/definitions/DefinedType"
          }
        },
        "controllerServices" : {
          "type" : "array",
          "description" : "Controller Services provided in this bundle",
          "items" : {
            "$ref" : "#/definitions/ControllerServiceDefinition"
          }
        },
        "processors" : {
          "type" : "array",
          "description" : "Processors provided in this bundle",
          "items" : {
            "$ref" : "#/definitions/ProcessorDefinition"
          }
        },
        "reportingTasks" : {
          "type" : "array",
          "description" : "Reporting Tasks provided in this bundle",
          "items" : {
            "$ref" : "#/definitions/ReportingTaskDefinition"
          }
        }
      }
    },
    "ComponentStatus" : {
      "type" : "object",
      "properties" : {
        "running" : {
          "type" : "boolean"
        }
      }
    },
    "ConnectableComponent" : {
      "type" : "object",
      "required" : [ "groupId", "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the connectable component."
        },
        "type" : {
          "type" : "string",
          "description" : "The type of component the connectable is.",
          "enum" : [ "PROCESSOR", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "INPUT_PORT", "OUTPUT_PORT", "FUNNEL" ]
        },
        "groupId" : {
          "type" : "string",
          "description" : "The id of the group that the connectable component resides in"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the connectable component"
        },
        "comments" : {
          "type" : "string",
          "description" : "The comments for the connectable component."
        }
      }
    },
    "ConnectionDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "sourceId" : {
          "type" : "string"
        },
        "sourceName" : {
          "type" : "string"
        },
        "sourceType" : {
          "type" : "string"
        },
        "sourceVersion" : {
          "type" : "string"
        },
        "destinationId" : {
          "type" : "string"
        },
        "destinationName" : {
          "type" : "string"
        },
        "destinationType" : {
          "type" : "string"
        },
        "destinationVersion" : {
          "type" : "string"
        }
      }
    },
    "ConnectionMetrics" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sizeMax" : {
          "type" : "integer",
          "format" : "int64"
        },
        "dataSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "dataSizeMax" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ControllerServiceAPI" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The fully qualified name of the service interface."
        },
        "bundle" : {
          "description" : "The details of the artifact that bundled this service interface.",
          "$ref" : "#/definitions/Bundle"
        }
      }
    },
    "ControllerServiceDefinition" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "group" : {
          "type" : "string",
          "description" : "The group name of the bundle that provides the referenced type."
        },
        "artifact" : {
          "type" : "string",
          "description" : "The artifact name of the bundle that provides the referenced type."
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the bundle that provides the referenced type."
        },
        "type" : {
          "type" : "string",
          "description" : "The fully-qualified class type"
        },
        "typeDescription" : {
          "type" : "string",
          "description" : "The description of the type."
        },
        "buildInfo" : {
          "description" : "The build metadata for this component",
          "$ref" : "#/definitions/BuildInfo"
        },
        "providedApiImplementations" : {
          "type" : "array",
          "description" : "If this type represents a provider for an interface, this lists the APIs it implements",
          "items" : {
            "$ref" : "#/definitions/DefinedType"
          }
        },
        "tags" : {
          "type" : "array",
          "description" : "The tags associated with this type",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "deprecated" : {
          "type" : "boolean",
          "description" : "Whether or not the component has been deprecated"
        },
        "deprecationReason" : {
          "type" : "string",
          "description" : "If this component has been deprecated, this optional field can be used to provide an explanation"
        },
        "propertyDescriptors" : {
          "type" : "object",
          "description" : "Descriptions of configuration properties applicable to this controller service",
          "additionalProperties" : {
            "$ref" : "#/definitions/PropertyDescriptor"
          }
        },
        "supportsDynamicProperties" : {
          "type" : "boolean",
          "description" : "Whether or not this processor makes use of dynamic (user-set) properties"
        }
      }
    },
    "CurrentUser" : {
      "type" : "object",
      "properties" : {
        "identity" : {
          "type" : "string",
          "description" : "The identity of the current user",
          "readOnly" : true
        },
        "anonymous" : {
          "type" : "boolean",
          "description" : "Indicates if the current user is anonymous",
          "readOnly" : true
        }
      }
    },
    "DefinedType" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "group" : {
          "type" : "string",
          "description" : "The group name of the bundle that provides the referenced type."
        },
        "artifact" : {
          "type" : "string",
          "description" : "The artifact name of the bundle that provides the referenced type."
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the bundle that provides the referenced type."
        },
        "type" : {
          "type" : "string",
          "description" : "The fully-qualified class type"
        },
        "typeDescription" : {
          "type" : "string",
          "description" : "The description of the type."
        }
      }
    },
    "DetailMetrics" : {
      "type" : "object",
      "properties" : {
        "connectionDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConnectionDetails"
          }
        },
        "connectionMetrics" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConnectionMetrics"
          }
        },
        "repositoryDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RepositoryDetails"
          }
        },
        "repositoryMetrics" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RepositoryMetrics"
          }
        },
        "empty" : {
          "type" : "boolean"
        }
      }
    },
    "DeviceInfo" : {
      "type" : "object",
      "required" : [ "identifier" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "A unique, long-lived identifier for the MiNiFi-enabled device"
        },
        "systemInfo" : {
          "description" : "Metadata for the device hardware and operating system",
          "$ref" : "#/definitions/SystemInfo"
        },
        "networkInfo" : {
          "description" : "Metadata for the network interface of this device",
          "$ref" : "#/definitions/NetworkInfo"
        }
      }
    },
    "ELOperation" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the operation"
        },
        "description" : {
          "type" : "string",
          "description" : "The description of the operation"
        },
        "args" : {
          "type" : "object",
          "description" : "The arguments for the operation where the key is the argument name and the value is the description",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "subject" : {
          "type" : "string",
          "description" : "The type of the subject"
        },
        "returnType" : {
          "type" : "string",
          "description" : "The type of the return value"
        }
      }
    },
    "ELSpecification" : {
      "type" : "object",
      "properties" : {
        "specificationKey" : {
          "type" : "string",
          "description" : "The key for the specification in the format '<agent-type>-<version>'"
        },
        "operations" : {
          "type" : "object",
          "description" : "The available operations for the given specification where the key is the operation name",
          "additionalProperties" : {
            "$ref" : "#/definitions/ELOperation"
          }
        }
      }
    },
    "Event" : {
      "type" : "object",
      "required" : [ "eventSource", "eventType", "level" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "level" : {
          "type" : "string",
          "enum" : [ "DEBUG", "INFO", "WARN", "ERROR" ]
        },
        "eventType" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 200
        },
        "message" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 8000
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "eventSource" : {
          "$ref" : "#/definitions/ResourceReference"
        },
        "eventDetail" : {
          "$ref" : "#/definitions/ResourceReference"
        },
        "agentClass" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "links" : {
          "$ref" : "#/definitions/EventLinks"
        }
      }
    },
    "EventLinks" : {
      "type" : "object",
      "properties" : {
        "detail" : {
          "description" : "Link to the event details, if applicable",
          "$ref" : "#/definitions/Link"
        },
        "agentClass" : {
          "description" : "Link to the event details, if applicable",
          "$ref" : "#/definitions/Link"
        },
        "source" : {
          "description" : "Link to the source of the event, if applicable",
          "$ref" : "#/definitions/Link"
        },
        "self" : {
          "description" : "Link to this resource entity",
          "$ref" : "#/definitions/Link"
        },
        "other" : {
          "type" : "array",
          "description" : "List of other rel links that have been set",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "ExternalControllerServiceReference" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The identifier of the controller service"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the controller service"
        }
      }
    },
    "FDComponentSummary" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "uri" : {
          "type" : "string"
        },
        "groupId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        }
      }
    },
    "FDComponentType" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "agentManifestId" : {
          "type" : "string",
          "description" : "The id of the agent manifest this component belongs to"
        },
        "group" : {
          "type" : "string",
          "description" : "The group name of the bundle that provides the referenced type."
        },
        "artifact" : {
          "type" : "string",
          "description" : "The artifact name of the bundle that provides the referenced type."
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the bundle that provides the referenced type."
        },
        "type" : {
          "type" : "string",
          "description" : "The fully-qualified class type"
        },
        "description" : {
          "type" : "string",
          "description" : "The description for this component"
        },
        "tags" : {
          "type" : "array",
          "description" : "The tags for this component",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "FDComponentTypes" : {
      "type" : "object",
      "properties" : {
        "flowId" : {
          "type" : "string",
          "description" : "The flow id that the component types are for"
        },
        "componentTypes" : {
          "type" : "array",
          "description" : "The set of available component types for the given flow",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FDComponentType"
          }
        }
      }
    },
    "FDConnection" : {
      "type" : "object",
      "properties" : {
        "uri" : {
          "type" : "string",
          "description" : "The URI for future requests to the component.",
          "readOnly" : true
        },
        "revision" : {
          "description" : "The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.",
          "$ref" : "#/definitions/FDRevision"
        },
        "componentConfiguration" : {
          "description" : "The configuration of the component.",
          "$ref" : "#/definitions/VersionedConnection"
        },
        "validationErrors" : {
          "type" : "array",
          "description" : "Zero or more reasons that the component is currently invalid as-configured. The component is said to be valid if the returned Collection is empty.",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "FDControllerService" : {
      "type" : "object",
      "properties" : {
        "uri" : {
          "type" : "string",
          "description" : "The URI for future requests to the component.",
          "readOnly" : true
        },
        "revision" : {
          "description" : "The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.",
          "$ref" : "#/definitions/FDRevision"
        },
        "componentConfiguration" : {
          "description" : "The configuration of the component.",
          "$ref" : "#/definitions/VersionedControllerService"
        },
        "validationErrors" : {
          "type" : "array",
          "description" : "Zero or more reasons that the component is currently invalid as-configured. The component is said to be valid if the returned Collection is empty.",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "componentDefinition" : {
          "description" : "The definition of the component including available properties, allowable values, allowed scheduling strategies, input requirements, etc.",
          "readOnly" : true,
          "$ref" : "#/definitions/ControllerServiceDefinition"
        }
      }
    },
    "FDFlow" : {
      "type" : "object",
      "required" : [ "flowContent", "flowMetadata", "localFlowRevision" ],
      "properties" : {
        "flowMetadata" : {
          "description" : "The flow metadata",
          "readOnly" : true,
          "$ref" : "#/definitions/FDFlowMetadata"
        },
        "flowContent" : {
          "description" : "The flow contents",
          "readOnly" : true,
          "$ref" : "#/definitions/VersionedProcessGroup"
        },
        "parameterContexts" : {
          "type" : "array",
          "description" : "Information about the parameter contexts used in this flow",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FDParameterContext"
          }
        },
        "versionInfo" : {
          "description" : "The version information for the flow",
          "readOnly" : true,
          "$ref" : "#/definitions/FDVersionInfo"
        },
        "localFlowRevision" : {
          "type" : "integer",
          "description" : "The local revision number for the given flow used to order flow events per flow",
          "readOnly" : true
        }
      }
    },
    "FDFlowMetadata" : {
      "type" : "object",
      "required" : [ "created", "updated" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The identifier of the flow"
        },
        "agentClass" : {
          "type" : "string",
          "description" : "The name of the agent class this flow is for"
        },
        "rootProcessGroupIdentifier" : {
          "type" : "string",
          "description" : "The identifier of the root process group for this flow"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp the flow was created",
          "readOnly" : true
        },
        "updated" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp the flow was updated",
          "readOnly" : true
        }
      }
    },
    "FDFlowPublishMetadata" : {
      "type" : "object",
      "properties" : {
        "comments" : {
          "type" : "string",
          "description" : "The comments for the version of the flow that will be published"
        }
      }
    },
    "FDFunnel" : {
      "type" : "object",
      "properties" : {
        "uri" : {
          "type" : "string",
          "description" : "The URI for future requests to the component.",
          "readOnly" : true
        },
        "revision" : {
          "description" : "The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.",
          "$ref" : "#/definitions/FDRevision"
        },
        "componentConfiguration" : {
          "description" : "The configuration of the component.",
          "$ref" : "#/definitions/VersionedFunnel"
        },
        "validationErrors" : {
          "type" : "array",
          "description" : "Zero or more reasons that the component is currently invalid as-configured. The component is said to be valid if the returned Collection is empty.",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "FDParameterContext" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the context"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the context"
        },
        "parameters" : {
          "type" : "array",
          "description" : "The parameters in this context",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Parameter"
          }
        },
        "usage" : {
          "description" : "Information about the usage of parameters in flow components",
          "$ref" : "#/definitions/FDParameterUsage"
        }
      }
    },
    "FDParameterContextUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "requestId" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "description" : "The current state of the request"
        },
        "complete" : {
          "type" : "boolean",
          "description" : "Whether or not the request is completed"
        },
        "failureReason" : {
          "type" : "string",
          "description" : "Indicates both if the request has failed and the reason if so. Or null if the request has not failed."
        },
        "created" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time (millis since Epoch) that the request was submitted"
        },
        "updated" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time (millis since Epoch) that the request was last updated"
        },
        "proposedContext" : {
          "description" : "The updated parameter context containing all changes to apply",
          "$ref" : "#/definitions/FDParameterContext"
        }
      }
    },
    "FDParameterReference" : {
      "type" : "object",
      "properties" : {
        "parameter" : {
          "type" : "string",
          "description" : "The name of the parameter that is referenced"
        },
        "componentId" : {
          "type" : "string",
          "description" : "The id of the component referencing the parameter"
        }
      }
    },
    "FDParameterUsage" : {
      "type" : "object",
      "properties" : {
        "components" : {
          "type" : "array",
          "description" : "Details about the components referencing parameters",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FDComponentSummary"
          }
        },
        "references" : {
          "type" : "array",
          "description" : "List of all parameter references",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FDParameterReference"
          }
        }
      }
    },
    "FDProcessGroup" : {
      "type" : "object",
      "properties" : {
        "uri" : {
          "type" : "string",
          "description" : "The URI for future requests to the component.",
          "readOnly" : true
        },
        "revision" : {
          "description" : "The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.",
          "$ref" : "#/definitions/FDRevision"
        },
        "componentConfiguration" : {
          "description" : "The configuration of the component.",
          "$ref" : "#/definitions/FDProcessGroupContent"
        },
        "validationErrors" : {
          "type" : "array",
          "description" : "Zero or more reasons that the component is currently invalid as-configured. The component is said to be valid if the returned Collection is empty.",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "FDProcessGroupContent" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "parameterContextId" : {
          "type" : "string",
          "description" : "The id of the parameter context currently mapped to this process group"
        },
        "processGroups" : {
          "type" : "array",
          "description" : "The child process groups of this process group",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FDProcessGroup"
          }
        },
        "remoteProcessGroups" : {
          "type" : "array",
          "description" : "The remote process groups in this process group",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FDRemoteProcessGroup"
          }
        },
        "processors" : {
          "type" : "array",
          "description" : "The processors in this process group",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FDProcessor"
          }
        },
        "connections" : {
          "type" : "array",
          "description" : "The connections in this process group",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FDConnection"
          }
        },
        "funnels" : {
          "type" : "array",
          "description" : "The funnels in this process group",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FDFunnel"
          }
        },
        "controllerServices" : {
          "type" : "array",
          "description" : "The controller services in this process group",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/FDControllerService"
          }
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "FDProcessor" : {
      "type" : "object",
      "properties" : {
        "uri" : {
          "type" : "string",
          "description" : "The URI for future requests to the component.",
          "readOnly" : true
        },
        "revision" : {
          "description" : "The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.",
          "$ref" : "#/definitions/FDRevision"
        },
        "componentConfiguration" : {
          "description" : "The configuration of the component.",
          "$ref" : "#/definitions/VersionedProcessor"
        },
        "validationErrors" : {
          "type" : "array",
          "description" : "Zero or more reasons that the component is currently invalid as-configured. The component is said to be valid if the returned Collection is empty.",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "componentDefinition" : {
          "description" : "The definition of the component including available properties, allowable values, allowed scheduling strategies, input requirements, etc.",
          "readOnly" : true,
          "$ref" : "#/definitions/ProcessorDefinition"
        }
      }
    },
    "FDPropertyDescriptor" : {
      "type" : "object",
      "properties" : {
        "propertyDescriptor" : {
          "description" : "The property descriptor",
          "$ref" : "#/definitions/PropertyDescriptor"
        }
      }
    },
    "FDRemoteProcessGroup" : {
      "type" : "object",
      "properties" : {
        "uri" : {
          "type" : "string",
          "description" : "The URI for future requests to the component.",
          "readOnly" : true
        },
        "revision" : {
          "description" : "The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.",
          "$ref" : "#/definitions/FDRevision"
        },
        "componentConfiguration" : {
          "description" : "The configuration of the component.",
          "$ref" : "#/definitions/VersionedRemoteProcessGroup"
        },
        "validationErrors" : {
          "type" : "array",
          "description" : "Zero or more reasons that the component is currently invalid as-configured. The component is said to be valid if the returned Collection is empty.",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "FDRevision" : {
      "type" : "object",
      "properties" : {
        "clientId" : {
          "type" : "string",
          "description" : "A client identifier used to make a request. By including a client identifier, the API can allow multiple requests without needing the current revision. Due to the asynchronous nature of requests/responses this was implemented to allow the client to make numerous requests without having to wait for the previous response to come back"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "C2 Flow Designer employs an optimistic locking strategy where the client must include a revision in their request when performing an update. In a response to a mutable flow request, this field represents the updated base version."
        },
        "lastModifier" : {
          "type" : "string",
          "description" : "The user that last modified the flow.",
          "readOnly" : true
        }
      }
    },
    "FDVersionInfo" : {
      "type" : "object",
      "required" : [ "lastPublished", "registryVersion" ],
      "properties" : {
        "registryUrl" : {
          "type" : "string",
          "description" : "The URL of the NiFi Registry instance that this flow was last published to"
        },
        "registryBucketId" : {
          "type" : "string",
          "description" : "The bucket id in the NiFi Registry instance that this flow was last published to"
        },
        "registryBucketName" : {
          "type" : "string",
          "description" : "The bucket name in the NiFi Registry instance that this flow was last published to"
        },
        "registryFlowId" : {
          "type" : "string",
          "description" : "The flow id in the NiFi Registry instance that this flow was last published to"
        },
        "registryVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The version in the NiFi Registry instance that this flow was last published to"
        },
        "lastPublished" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp this flow was last published"
        },
        "lastPublishedBy" : {
          "type" : "string",
          "description" : "The identity of the user that performed the last publish"
        },
        "dirty" : {
          "type" : "boolean",
          "description" : "Whether or not there have been local changes since the last publish event"
        }
      }
    },
    "FDVersionInfoResult" : {
      "type" : "object",
      "properties" : {
        "versionInfo" : {
          "description" : "The version info which will be null when the flow has not been published yet.",
          "$ref" : "#/definitions/FDVersionInfo"
        }
      }
    },
    "Fields" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Flow" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "A unique identifier of the flow"
        },
        "registryUrl" : {
          "type" : "string",
          "description" : "The URL of the NiFi Registry this flow was retrieved from, or null if the flow came from direct upload"
        },
        "registryBucketId" : {
          "type" : "string",
          "description" : "The id of the NiFi Registry bucket this flow was retrieved from, or null if the flow came from direct upload"
        },
        "registryFlowId" : {
          "type" : "string",
          "description" : "The id of the NiFi Registry flow this flow was retrieved from, or null if the flow came from direct upload"
        },
        "registryFlowVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The version of the NiFi Registry flow this flow was retrieved from, or null if the flow came from direct upload"
        },
        "designerFlowId" : {
          "type" : "string",
          "description" : "The id of the Flow Designer flow that this flow is based on, or null if the flow came from another source"
        },
        "designerFlowRevision" : {
          "type" : "integer",
          "description" : "The revision of the Flow Designer flow that this flow is based on, or null if the flow came from another source"
        },
        "flowFormat" : {
          "type" : "string",
          "description" : "The format of the flow indicating how the content should be interpreted when retrieving the flow content",
          "enum" : [ "YAML_V2_TYPE", "FLOW_SNAPSHOT_JSON_V1_TYPE" ]
        },
        "createdTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "A timestamp (ms since epoch) for when this flow was created in the C2 server"
        },
        "updatedTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "A timestamp (ms since epoch) for when this flow was updated in the C2 server"
        },
        "uri" : {
          "type" : "string",
          "format" : "uri",
          "description" : "The URI to retrieve this flow"
        },
        "flowContent" : {
          "type" : "string",
          "description" : "The content of the flow according to the flow format"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date this flow was created in the C2 server. DEPRECATED: use createdTime"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date this flow was updated in the C2 server. DEPRECATED: use updatedTime"
        }
      }
    },
    "FlowInfo" : {
      "type" : "object",
      "required" : [ "flowId" ],
      "properties" : {
        "flowId" : {
          "type" : "string",
          "description" : "A unique identifier of the flow currently deployed on the agent"
        },
        "versionedFlowSnapshotURI" : {
          "description" : "The URI to the Versioned Flow Snapshot, when the flow corresponds to a Versioned Flow in a NiFi Registry.",
          "$ref" : "#/definitions/FlowUri"
        },
        "components" : {
          "type" : "object",
          "description" : "Status and for each component that is part of the flow (e.g., processors)",
          "additionalProperties" : {
            "$ref" : "#/definitions/ComponentStatus"
          }
        },
        "queues" : {
          "type" : "object",
          "description" : "Status and metrics for each flow connection queue",
          "additionalProperties" : {
            "$ref" : "#/definitions/FlowQueueStatus"
          }
        }
      }
    },
    "FlowMapping" : {
      "type" : "object",
      "properties" : {
        "agentClass" : {
          "type" : "string",
          "description" : "The name of the agent class for this mapping"
        },
        "flowId" : {
          "type" : "string",
          "description" : "The id of the flow for this mapping"
        },
        "flowUri" : {
          "type" : "string",
          "format" : "uri",
          "description" : "The URI of the flow that this agent class is currently mapped to",
          "readOnly" : true
        }
      }
    },
    "FlowMappings" : {
      "type" : "object",
      "properties" : {
        "flowMappings" : {
          "type" : "array",
          "description" : "The list of flow mappings",
          "items" : {
            "$ref" : "#/definitions/FlowMapping"
          }
        }
      }
    },
    "FlowParametersMapping" : {
      "type" : "object",
      "properties" : {
        "flowId" : {
          "type" : "string"
        },
        "parameterContextId" : {
          "type" : "string"
        }
      }
    },
    "FlowQueueStatus" : {
      "type" : "object",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of flow files in the queue",
          "minimum" : 0,
          "maximum" : 9223372036854775807
        },
        "sizeMax" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The maximum number of flow files that the queue is configured to hold",
          "minimum" : 0,
          "maximum" : 9223372036854775807
        },
        "dataSize" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The size (in Bytes) of all flow files in the queue",
          "minimum" : 0,
          "maximum" : 9223372036854775807
        },
        "dataSizeMax" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The maximum size (in Bytes) that the queue is configured to hold",
          "minimum" : 0,
          "maximum" : 9223372036854775807
        }
      }
    },
    "FlowSnapshot" : {
      "type" : "object",
      "properties" : {
        "flowUri" : {
          "description" : "The flow URI containing the location of the flow in a NiFi Registry instance",
          "$ref" : "#/definitions/FlowUri"
        },
        "designerFlowId" : {
          "type" : "string",
          "description" : "The id of the flow from the flow designer"
        },
        "designerFlowRevision" : {
          "type" : "integer",
          "description" : "The revision of the flow from the flow designer"
        },
        "versionedFlowSnapshot" : {
          "description" : "The snapshot containing the contents of the flow",
          "$ref" : "#/definitions/VersionedFlowSnapshot"
        }
      }
    },
    "FlowSummaries" : {
      "type" : "object",
      "properties" : {
        "flows" : {
          "type" : "array",
          "description" : "The list of flow summaries",
          "items" : {
            "$ref" : "#/definitions/FlowSummary"
          }
        }
      }
    },
    "FlowSummary" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "A unique identifier of the flow"
        },
        "registryUrl" : {
          "type" : "string",
          "description" : "The URL of the NiFi Registry this flow was retrieved from, or null if the flow came from direct upload"
        },
        "registryBucketId" : {
          "type" : "string",
          "description" : "The id of the NiFi Registry bucket this flow was retrieved from, or null if the flow came from direct upload"
        },
        "registryFlowId" : {
          "type" : "string",
          "description" : "The id of the NiFi Registry flow this flow was retrieved from, or null if the flow came from direct upload"
        },
        "registryFlowVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The version of the NiFi Registry flow this flow was retrieved from, or null if the flow came from direct upload"
        },
        "designerFlowId" : {
          "type" : "string",
          "description" : "The id of the Flow Designer flow that this flow is based on, or null if the flow came from another source"
        },
        "designerFlowRevision" : {
          "type" : "integer",
          "description" : "The revision of the Flow Designer flow that this flow is based on, or null if the flow came from another source"
        },
        "flowFormat" : {
          "type" : "string",
          "description" : "The format of the flow indicating how the content should be interpreted when retrieving the flow content",
          "enum" : [ "YAML_V2_TYPE", "FLOW_SNAPSHOT_JSON_V1_TYPE" ]
        },
        "createdTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "A timestamp (ms since epoch) for when this flow was created in the C2 server"
        },
        "updatedTime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "A timestamp (ms since epoch) for when this flow was updated in the C2 server"
        },
        "uri" : {
          "type" : "string",
          "format" : "uri",
          "description" : "The URI to retrieve this flow"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date this flow was created in the C2 server. DEPRECATED: use createdTime"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date this flow was updated in the C2 server. DEPRECATED: use updatedTime"
        }
      }
    },
    "FlowUri" : {
      "type" : "object",
      "properties" : {
        "registryUrl" : {
          "type" : "string",
          "description" : "The URL of the NiFi Registry storing the flow."
        },
        "bucketId" : {
          "type" : "string",
          "description" : "The identifier of the bucket at the NiFi Registry that contains the flow"
        },
        "flowId" : {
          "type" : "string",
          "description" : "The identifier of the flow in the NiFi Registry bucket"
        }
      },
      "description" : "Uniform Resource Identifier for NiFi Versioned Flows saved to a NiFi Registry"
    },
    "JaxbLink" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "format" : "uri",
          "xml" : {
            "attribute" : true
          },
          "description" : "The href for the link"
        },
        "params" : {
          "type" : "object",
          "description" : "The params for the link",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string"
        },
        "rel" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "params" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ListContainer" : {
      "type" : "object",
      "properties" : {
        "elements" : {
          "type" : "array",
          "description" : "The elements of the list",
          "readOnly" : true,
          "items" : {
            "type" : "object"
          }
        },
        "links" : {
          "description" : "Hypermedia links to other pages, when in a pageable context",
          "$ref" : "#/definitions/PageLinks"
        },
        "page" : {
          "description" : "The metadata of the current page, when in a pageable context",
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "description" : "A container for a list of elements"
    },
    "Location" : {
      "type" : "object",
      "properties" : {
        "latitude" : {
          "type" : "number",
          "format" : "double"
        },
        "longitude" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "NetworkInfo" : {
      "type" : "object",
      "properties" : {
        "deviceId" : {
          "type" : "string",
          "description" : "The device network interface ID",
          "minLength" : 0,
          "maxLength" : 200
        },
        "hostname" : {
          "type" : "string",
          "description" : "The device network hostname"
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "The device network interface IP Address (v4 or v6)",
          "minLength" : 0,
          "maxLength" : 45
        }
      }
    },
    "NiFiRegistryInfo" : {
      "type" : "object",
      "properties" : {
        "baseUrl" : {
          "type" : "string",
          "description" : "The base url of the NiFi Registry instance that this C2 server is configured with"
        },
        "bucketId" : {
          "type" : "string",
          "description" : "The bucket id in the NiFi Registry instance that this C2 server is configured with. Only one of bucket id or bucket name will be populated."
        },
        "bucketName" : {
          "type" : "string",
          "description" : "The bucket name in the NiFi Registry that this C2 server is configured with. Only one of bucket id or bucket name will be populated."
        }
      }
    },
    "Operation" : {
      "type" : "object",
      "required" : [ "operation", "state" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "A unique identifier for the operation",
          "readOnly" : true
        },
        "operation" : {
          "type" : "string",
          "description" : "The type of operation",
          "enum" : [ "ACKNOWLEDGE", "HEARTBEAT", "CLEAR", "DESCRIBE", "UPDATE", "RESTART", "START", "STOP" ]
        },
        "operand" : {
          "type" : "string",
          "description" : "The primary operand of the operation"
        },
        "args" : {
          "type" : "object",
          "description" : "If the operation requires arguments ",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "dependencies" : {
          "type" : "array",
          "description" : "Optional set of operation ids that this operation depends on. Executing this operation is conditional on the success of all dependency operations.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "targetAgentId" : {
          "type" : "string",
          "description" : "The identifier of the agent to which the operation applies"
        },
        "state" : {
          "type" : "string",
          "description" : "The current state of the operation",
          "readOnly" : true,
          "enum" : [ "NEW", "READY", "QUEUED", "DEPLOYED", "DONE", "FAILED", "CANCELLED" ]
        },
        "details" : {
          "type" : "string",
          "description" : "Additional details about the state of this operation (such as an error message)."
        },
        "createdBy" : {
          "type" : "string",
          "description" : "The verified identity of the C2 server client that created the operation",
          "readOnly" : true
        },
        "created" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time (in milliseconds since Epoch) that this operation was created"
        },
        "updated" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time (in milliseconds since Epoch) that this operation was last updated"
        }
      }
    },
    "PageLinks" : {
      "type" : "object",
      "properties" : {
        "prev" : {
          "description" : "Link to the previous page",
          "$ref" : "#/definitions/Link"
        },
        "first" : {
          "description" : "Link to the first page",
          "$ref" : "#/definitions/Link"
        },
        "new" : {
          "description" : "Link to newer results, in the case that the resource type supports it",
          "$ref" : "#/definitions/Link"
        },
        "last" : {
          "description" : "Link to the last page",
          "$ref" : "#/definitions/Link"
        },
        "next" : {
          "description" : "Link to the next page",
          "$ref" : "#/definitions/Link"
        },
        "self" : {
          "description" : "Link to this resource entity",
          "$ref" : "#/definitions/Link"
        },
        "other" : {
          "type" : "array",
          "description" : "List of other rel links that have been set",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "PageMetadata" : {
      "type" : "object",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The page size being used (may be larger than the number of elements returned, e.g., a partial, last page)"
        },
        "number" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The index (zero-based) of the current page"
        },
        "totalElements" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The total number of elements across all pages"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The total number of pages"
        }
      }
    },
    "Parameter" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the parameter"
        },
        "sensitive" : {
          "type" : "boolean",
          "description" : "Whether or not the parameter value is sensitive"
        },
        "description" : {
          "type" : "string",
          "description" : "A brief explanation of how the parameter is used"
        },
        "value" : {
          "type" : "string",
          "description" : "The value of the parameter in this context"
        }
      }
    },
    "ParameterContext" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the context"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the context"
        },
        "parameters" : {
          "type" : "array",
          "description" : "The parameters in this context",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Parameter"
          }
        }
      }
    },
    "Permissions" : {
      "type" : "object",
      "properties" : {
        "canRead" : {
          "type" : "boolean",
          "description" : "Indicates whether the user can read a given resource.",
          "readOnly" : true
        },
        "canWrite" : {
          "type" : "boolean",
          "description" : "Indicates whether the user can write a given resource.",
          "readOnly" : true
        },
        "canDelete" : {
          "type" : "boolean",
          "description" : "Indicates whether the user can delete a given resource.",
          "readOnly" : true
        }
      }
    },
    "Position" : {
      "type" : "object",
      "properties" : {
        "x" : {
          "type" : "number",
          "format" : "double",
          "description" : "The x coordinate."
        },
        "y" : {
          "type" : "number",
          "format" : "double",
          "description" : "The y coordinate."
        }
      },
      "description" : "The position of a component on the graph"
    },
    "ProcessorDefinition" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "group" : {
          "type" : "string",
          "description" : "The group name of the bundle that provides the referenced type."
        },
        "artifact" : {
          "type" : "string",
          "description" : "The artifact name of the bundle that provides the referenced type."
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the bundle that provides the referenced type."
        },
        "type" : {
          "type" : "string",
          "description" : "The fully-qualified class type"
        },
        "typeDescription" : {
          "type" : "string",
          "description" : "The description of the type."
        },
        "buildInfo" : {
          "description" : "The build metadata for this component",
          "$ref" : "#/definitions/BuildInfo"
        },
        "providedApiImplementations" : {
          "type" : "array",
          "description" : "If this type represents a provider for an interface, this lists the APIs it implements",
          "items" : {
            "$ref" : "#/definitions/DefinedType"
          }
        },
        "tags" : {
          "type" : "array",
          "description" : "The tags associated with this type",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "deprecated" : {
          "type" : "boolean",
          "description" : "Whether or not the component has been deprecated"
        },
        "deprecationReason" : {
          "type" : "string",
          "description" : "If this component has been deprecated, this optional field can be used to provide an explanation"
        },
        "propertyDescriptors" : {
          "type" : "object",
          "description" : "Descriptions of configuration properties applicable to this reporting task",
          "additionalProperties" : {
            "$ref" : "#/definitions/PropertyDescriptor"
          }
        },
        "supportsDynamicProperties" : {
          "type" : "boolean",
          "description" : "Whether or not this processor makes use of dynamic (user-set) properties"
        },
        "inputRequirement" : {
          "type" : "string",
          "description" : "Any input requirements this processor has",
          "enum" : [ "INPUT_REQUIRED", "INPUT_ALLOWED", "INPUT_FORBIDDEN" ]
        },
        "supportedRelationships" : {
          "type" : "array",
          "description" : "The supported relationships for this processor",
          "items" : {
            "$ref" : "#/definitions/Relationship"
          }
        },
        "supportsDynamicRelationships" : {
          "type" : "boolean",
          "description" : "Whether or not this processor supports dynamic relationships"
        }
      }
    },
    "PropertyAllowableValue" : {
      "type" : "object",
      "required" : [ "value" ],
      "properties" : {
        "value" : {
          "type" : "string",
          "description" : "The internal value"
        },
        "displayName" : {
          "type" : "string",
          "description" : "The display name of the value, if different from the internal value"
        },
        "description" : {
          "type" : "string",
          "description" : "The description of the value, e.g., the behavior it produces."
        }
      }
    },
    "PropertyDescriptor" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the property key"
        },
        "displayName" : {
          "type" : "string",
          "description" : "The display name of the property key, if different from the name"
        },
        "description" : {
          "type" : "string",
          "description" : "The description of what the property does"
        },
        "allowableValues" : {
          "type" : "array",
          "description" : "A list of the allowable values for the property",
          "items" : {
            "$ref" : "#/definitions/PropertyAllowableValue"
          }
        },
        "defaultValue" : {
          "type" : "string",
          "description" : "The default value if a user-set value is not specified"
        },
        "required" : {
          "type" : "boolean",
          "description" : "Whether or not  the property is required for the component"
        },
        "sensitive" : {
          "type" : "boolean",
          "description" : "Whether or not  the value of the property is considered sensitive (e.g., passwords and keys)"
        },
        "expressionLanguageScope" : {
          "type" : "string",
          "description" : "The scope of expression language supported by this property",
          "enum" : [ "NONE", "VARIABLE_REGISTRY", "FLOWFILE_ATTRIBUTES" ]
        },
        "expressionLanguageScopeDescription" : {
          "type" : "string",
          "description" : "The description of the expression language scope supported by this property",
          "readOnly" : true
        },
        "typeProvidedByValue" : {
          "description" : "Indicates that this property is for selecting a controller service of the specified type",
          "$ref" : "#/definitions/DefinedType"
        },
        "validRegex" : {
          "type" : "string",
          "description" : "A regular expression that can be used to validate the value of this property"
        },
        "validator" : {
          "type" : "string",
          "description" : "Name of the validator used for this property descriptor"
        },
        "dynamic" : {
          "type" : "boolean",
          "description" : "Whether or not the descriptor is for a dynamically added property"
        }
      }
    },
    "Relationship" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the relationship"
        },
        "description" : {
          "type" : "string",
          "description" : "The description of the relationship"
        }
      }
    },
    "ReportingTaskDefinition" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "group" : {
          "type" : "string",
          "description" : "The group name of the bundle that provides the referenced type."
        },
        "artifact" : {
          "type" : "string",
          "description" : "The artifact name of the bundle that provides the referenced type."
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the bundle that provides the referenced type."
        },
        "type" : {
          "type" : "string",
          "description" : "The fully-qualified class type"
        },
        "typeDescription" : {
          "type" : "string",
          "description" : "The description of the type."
        },
        "buildInfo" : {
          "description" : "The build metadata for this component",
          "$ref" : "#/definitions/BuildInfo"
        },
        "providedApiImplementations" : {
          "type" : "array",
          "description" : "If this type represents a provider for an interface, this lists the APIs it implements",
          "items" : {
            "$ref" : "#/definitions/DefinedType"
          }
        },
        "tags" : {
          "type" : "array",
          "description" : "The tags associated with this type",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "deprecated" : {
          "type" : "boolean",
          "description" : "Whether or not the component has been deprecated"
        },
        "deprecationReason" : {
          "type" : "string",
          "description" : "If this component has been deprecated, this optional field can be used to provide an explanation"
        },
        "propertyDescriptors" : {
          "type" : "object",
          "description" : "Descriptions of configuration properties applicable to this reporting task",
          "additionalProperties" : {
            "$ref" : "#/definitions/PropertyDescriptor"
          }
        },
        "supportedSchedulingStrategies" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "defaultSchedulingStrategy" : {
          "type" : "string"
        },
        "defaultValuesBySchedulingStrategy" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "supportsDynamicProperties" : {
          "type" : "boolean",
          "description" : "Whether or not this reporting task makes use of dynamic (user-set) properties"
        }
      }
    },
    "RepositoryDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "RepositoryMetrics" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sizeMax" : {
          "type" : "integer",
          "format" : "int64"
        },
        "dataSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "dataSizeMax" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ResourceReference" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 200
        },
        "id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 4096
        },
        "parent" : {
          "$ref" : "#/definitions/ResourceReference"
        }
      }
    },
    "SchedulingDefaults" : {
      "type" : "object",
      "properties" : {
        "defaultSchedulingStrategy" : {
          "type" : "string",
          "description" : "The name of the default scheduling strategy",
          "enum" : [ "TIMER_DRIVEN", "EVENT_DRIVEN" ]
        },
        "defaultSchedulingPeriodMillis" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The default scheduling period in milliseconds"
        },
        "penalizationPeriodMillis" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The default penalization period in milliseconds"
        },
        "yieldDurationMillis" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The default yield duration in milliseconds"
        },
        "defaultRunDurationNanos" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The default run duration in nano-seconds"
        },
        "defaultMaxConcurrentTasks" : {
          "type" : "string",
          "description" : "The default concurrent tasks"
        }
      }
    },
    "SystemInfo" : {
      "type" : "object",
      "properties" : {
        "machineArch" : {
          "type" : "string",
          "description" : "Machine architecture of the device, e.g., ARM, x86",
          "minLength" : 0,
          "maxLength" : 100
        },
        "operatingSystem" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 100
        },
        "physicalMem" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Size of physical memory of the device in bytes",
          "minimum" : 0,
          "maximum" : 9223372036854775807
        },
        "vCores" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of virtual cores on the device",
          "minimum" : 0,
          "maximum" : 2147483647
        }
      }
    },
    "VersionedConnection" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "source" : {
          "description" : "The source of the connection.",
          "$ref" : "#/definitions/ConnectableComponent"
        },
        "destination" : {
          "description" : "The destination of the connection.",
          "$ref" : "#/definitions/ConnectableComponent"
        },
        "labelIndex" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The index of the bend point where to place the connection label."
        },
        "zIndex" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The z index of the connection."
        },
        "selectedRelationships" : {
          "type" : "array",
          "description" : "The selected relationship that comprise the connection.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "backPressureObjectThreshold" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The object count threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue."
        },
        "backPressureDataSizeThreshold" : {
          "type" : "string",
          "description" : "The object data size threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue."
        },
        "flowFileExpiration" : {
          "type" : "string",
          "description" : "The amount of time a flow file may be in the flow before it will be automatically aged out of the flow. Once a flow file reaches this age it will be terminated from the flow the next time a processor attempts to start work on it."
        },
        "prioritizers" : {
          "type" : "array",
          "description" : "The comparators used to prioritize the queue.",
          "items" : {
            "type" : "string"
          }
        },
        "bends" : {
          "type" : "array",
          "description" : "The bend points on the connection.",
          "items" : {
            "$ref" : "#/definitions/Position"
          }
        },
        "loadBalanceStrategy" : {
          "type" : "string",
          "description" : "The Strategy to use for load balancing data across the cluster, or null, if no Load Balance Strategy has been specified.",
          "enum" : [ "DO_NOT_LOAD_BALANCE", "PARTITION_BY_ATTRIBUTE", "ROUND_ROBIN", "SINGLE_NODE" ]
        },
        "partitioningAttribute" : {
          "type" : "string",
          "description" : "The attribute to use for partitioning data as it is load balanced across the cluster. If the Load Balance Strategy is configured to use PARTITION_BY_ATTRIBUTE, the value returned by this method is the name of the FlowFile Attribute that will be used to determine which node in the cluster should receive a given FlowFile. If the Load Balance Strategy is unset or is set to any other value, the Partitioning Attribute has no effect."
        },
        "loadBalanceCompression" : {
          "type" : "string",
          "description" : "Whether or not compression should be used when transferring FlowFiles between nodes",
          "enum" : [ "DO_NOT_COMPRESS", "COMPRESS_ATTRIBUTES_ONLY", "COMPRESS_ATTRIBUTES_AND_CONTENT" ]
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedControllerService" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the controller service."
        },
        "bundle" : {
          "description" : "The details of the artifact that bundled this processor type.",
          "$ref" : "#/definitions/Bundle"
        },
        "controllerServiceApis" : {
          "type" : "array",
          "description" : "Lists the APIs this Controller Service implements.",
          "items" : {
            "$ref" : "#/definitions/ControllerServiceAPI"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "The properties of the controller service.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "propertyDescriptors" : {
          "type" : "object",
          "description" : "The property descriptors for the processor.",
          "additionalProperties" : {
            "$ref" : "#/definitions/VersionedPropertyDescriptor"
          }
        },
        "annotationData" : {
          "type" : "string",
          "description" : "The annotation for the controller service. This is how the custom UI relays configuration to the controller service."
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedFlow" : {
      "type" : "object",
      "required" : [ "bucketIdentifier", "name", "type" ],
      "properties" : {
        "link" : {
          "description" : "An WebLink to this entity.",
          "readOnly" : true,
          "$ref" : "#/definitions/JaxbLink"
        },
        "identifier" : {
          "type" : "string",
          "description" : "An ID to uniquely identify this object.",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the item."
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the item."
        },
        "bucketIdentifier" : {
          "type" : "string",
          "description" : "The identifier of the bucket this items belongs to. This cannot be changed after the item is created."
        },
        "bucketName" : {
          "type" : "string",
          "description" : "The name of the bucket this items belongs to.",
          "readOnly" : true
        },
        "createdTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp of when the item was created, as milliseconds since epoch.",
          "readOnly" : true,
          "minimum" : 1
        },
        "modifiedTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp of when the item was last modified, as milliseconds since epoch.",
          "readOnly" : true,
          "minimum" : 1
        },
        "type" : {
          "type" : "string",
          "description" : "The type of item.",
          "enum" : [ "Flow", "Bundle" ]
        },
        "permissions" : {
          "description" : "The access that the current user has to the bucket containing this item.",
          "readOnly" : true,
          "$ref" : "#/definitions/Permissions"
        },
        "versionCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of versions of this flow.",
          "readOnly" : true,
          "minimum" : 0
        }
      }
    },
    "VersionedFlowCoordinates" : {
      "type" : "object",
      "properties" : {
        "registryUrl" : {
          "type" : "string",
          "description" : "The URL of the Flow Registry that contains the flow"
        },
        "bucketId" : {
          "type" : "string",
          "description" : "The UUID of the bucket that the flow resides in"
        },
        "flowId" : {
          "type" : "string",
          "description" : "The UUID of the flow"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The version of the flow"
        },
        "latest" : {
          "type" : "boolean",
          "description" : "Whether or not these coordinates point to the latest version of the flow"
        }
      }
    },
    "VersionedFlowSnapshot" : {
      "type" : "object",
      "required" : [ "flowContents", "snapshotMetadata" ],
      "properties" : {
        "snapshotMetadata" : {
          "description" : "The metadata for this snapshot",
          "$ref" : "#/definitions/VersionedFlowSnapshotMetadata"
        },
        "flowContents" : {
          "description" : "The contents of the versioned flow",
          "$ref" : "#/definitions/VersionedProcessGroup"
        },
        "externalControllerServices" : {
          "type" : "object",
          "description" : "The information about controller services that exist outside this versioned flow, but are referenced by components within the versioned flow.",
          "additionalProperties" : {
            "$ref" : "#/definitions/ExternalControllerServiceReference"
          }
        },
        "parameterContexts" : {
          "type" : "object",
          "description" : "The parameter contexts referenced by process groups in the flow contents. The mapping is from the name of the context to the context instance, and it is expected that any context in this map is referenced by at least one process group in this flow.",
          "additionalProperties" : {
            "$ref" : "#/definitions/VersionedParameterContext"
          }
        },
        "flowEncodingVersion" : {
          "type" : "string",
          "description" : "The optional encoding version of the flow contents."
        },
        "flow" : {
          "description" : "The flow this snapshot is for",
          "readOnly" : true,
          "$ref" : "#/definitions/VersionedFlow"
        },
        "bucket" : {
          "description" : "The bucket where the flow is located",
          "readOnly" : true,
          "$ref" : "#/definitions/Bucket"
        },
        "latest" : {
          "type" : "boolean"
        }
      }
    },
    "VersionedFlowSnapshotMetadata" : {
      "type" : "object",
      "required" : [ "bucketIdentifier", "flowIdentifier", "version" ],
      "properties" : {
        "link" : {
          "description" : "An WebLink to this entity.",
          "readOnly" : true,
          "$ref" : "#/definitions/JaxbLink"
        },
        "bucketIdentifier" : {
          "type" : "string",
          "description" : "The identifier of the bucket this snapshot belongs to."
        },
        "flowIdentifier" : {
          "type" : "string",
          "description" : "The identifier of the flow this snapshot belongs to."
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The version of this snapshot of the flow.",
          "minimum" : -1
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp when the flow was saved, as milliseconds since epoch.",
          "readOnly" : true,
          "minimum" : 1
        },
        "author" : {
          "type" : "string",
          "description" : "The user that created this snapshot of the flow.",
          "readOnly" : true
        },
        "comments" : {
          "type" : "string",
          "description" : "The comments provided by the user when creating the snapshot."
        }
      }
    },
    "VersionedFunnel" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedLabel" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "label" : {
          "type" : "string",
          "description" : "The text that appears in the label."
        },
        "width" : {
          "type" : "number",
          "format" : "double",
          "description" : "The width of the label in pixels when at a 1:1 scale."
        },
        "height" : {
          "type" : "number",
          "format" : "double",
          "description" : "The height of the label in pixels when at a 1:1 scale."
        },
        "style" : {
          "type" : "object",
          "description" : "The styles for this label (font-size : 12px, background-color : #eee, etc).",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedParameter" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the parameter"
        },
        "description" : {
          "type" : "string",
          "description" : "The description of the param"
        },
        "sensitive" : {
          "type" : "boolean",
          "description" : "Whether or not the parameter value is sensitive"
        },
        "value" : {
          "type" : "string",
          "description" : "The value of the parameter"
        }
      }
    },
    "VersionedParameterContext" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the context"
        },
        "parameters" : {
          "type" : "array",
          "description" : "The parameters in the context",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedParameter"
          }
        }
      }
    },
    "VersionedPort" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of port.",
          "enum" : [ "INPUT_PORT", "OUTPUT_PORT" ]
        },
        "concurrentlySchedulableTaskCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of tasks that should be concurrently scheduled for the port."
        },
        "scheduledState" : {
          "type" : "string",
          "description" : "The scheduled state of the component",
          "enum" : [ "ENABLED", "DISABLED" ]
        },
        "allowRemoteAccess" : {
          "type" : "boolean",
          "description" : "Whether or not this port allows remote access for site-to-site"
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedProcessGroup" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "processGroups" : {
          "type" : "array",
          "description" : "The child Process Groups",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedProcessGroup"
          }
        },
        "remoteProcessGroups" : {
          "type" : "array",
          "description" : "The Remote Process Groups",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedRemoteProcessGroup"
          }
        },
        "processors" : {
          "type" : "array",
          "description" : "The Processors",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedProcessor"
          }
        },
        "inputPorts" : {
          "type" : "array",
          "description" : "The Input Ports",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedPort"
          }
        },
        "outputPorts" : {
          "type" : "array",
          "description" : "The Output Ports",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedPort"
          }
        },
        "connections" : {
          "type" : "array",
          "description" : "The Connections",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedConnection"
          }
        },
        "labels" : {
          "type" : "array",
          "description" : "The Labels",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedLabel"
          }
        },
        "funnels" : {
          "type" : "array",
          "description" : "The Funnels",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedFunnel"
          }
        },
        "controllerServices" : {
          "type" : "array",
          "description" : "The Controller Services",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedControllerService"
          }
        },
        "versionedFlowCoordinates" : {
          "description" : "The coordinates where the remote flow is stored, or null if the Process Group is not directly under Version Control",
          "$ref" : "#/definitions/VersionedFlowCoordinates"
        },
        "variables" : {
          "type" : "object",
          "description" : "The Variables in the Variable Registry for this Process Group (not including any ancestor or descendant Process Groups)",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "parameterContextName" : {
          "type" : "string",
          "description" : "The name of the parameter context used by this process group"
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedProcessor" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "bundle" : {
          "description" : "Information about the bundle from which the component came",
          "$ref" : "#/definitions/Bundle"
        },
        "style" : {
          "type" : "object",
          "description" : "Stylistic data for rendering in a UI",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "The type of Processor"
        },
        "properties" : {
          "type" : "object",
          "description" : "The properties for the processor. Properties whose value is not set will only contain the property name.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "propertyDescriptors" : {
          "type" : "object",
          "description" : "The property descriptors for the processor.",
          "additionalProperties" : {
            "$ref" : "#/definitions/VersionedPropertyDescriptor"
          }
        },
        "annotationData" : {
          "type" : "string",
          "description" : "The annotation data for the processor used to relay configuration between a custom UI and the procesosr."
        },
        "schedulingPeriod" : {
          "type" : "string",
          "description" : "The frequency with which to schedule the processor. The format of the value will depend on th value of schedulingStrategy."
        },
        "schedulingStrategy" : {
          "type" : "string",
          "description" : "Indcates whether the prcessor should be scheduled to run in event or timer driven mode."
        },
        "executionNode" : {
          "type" : "string",
          "description" : "Indicates the node where the process will execute."
        },
        "penaltyDuration" : {
          "type" : "string",
          "description" : "The amout of time that is used when the process penalizes a flowfile."
        },
        "yieldDuration" : {
          "type" : "string",
          "description" : "The amount of time that must elapse before this processor is scheduled again after yielding."
        },
        "bulletinLevel" : {
          "type" : "string",
          "description" : "The level at which the processor will report bulletins."
        },
        "runDurationMillis" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The run duration for the processor in milliseconds."
        },
        "concurrentlySchedulableTaskCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of tasks that should be concurrently schedule for the processor. If the processor doesn't allow parallol processing then any positive input will be ignored."
        },
        "autoTerminatedRelationships" : {
          "type" : "array",
          "description" : "The names of all relationships that cause a flow file to be terminated if the relationship is not connected elsewhere. This property differs from the 'isAutoTerminate' property of the RelationshipDTO in that the RelationshipDTO is meant to depict the current configuration, whereas this property can be set in a DTO when updating a Processor in order to change which Relationships should be auto-terminated.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "scheduledState" : {
          "type" : "string",
          "description" : "The scheduled state of the component",
          "enum" : [ "ENABLED", "DISABLED" ]
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedPropertyDescriptor" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the property"
        },
        "displayName" : {
          "type" : "string",
          "description" : "The display name of the property"
        },
        "identifiesControllerService" : {
          "type" : "boolean",
          "description" : "Whether or not the property provides the identifier of a Controller Service"
        },
        "sensitive" : {
          "type" : "boolean",
          "description" : "Whether or not the property is considered sensitive"
        }
      }
    },
    "VersionedRemoteGroupPort" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "remoteGroupId" : {
          "type" : "string",
          "description" : "The id of the remote process group that the port resides in."
        },
        "concurrentlySchedulableTaskCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of task that may transmit flowfiles to the target port concurrently."
        },
        "useCompression" : {
          "type" : "boolean",
          "description" : "Whether the flowfiles are compressed when sent to the target port."
        },
        "batchSize" : {
          "description" : "The batch settings for data transmission.",
          "$ref" : "#/definitions/BatchSize"
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "targetId" : {
          "type" : "string",
          "description" : "The ID of the port on the target NiFi instance"
        },
        "scheduledState" : {
          "type" : "string",
          "description" : "The scheduled state of the component",
          "enum" : [ "ENABLED", "DISABLED" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedRemoteProcessGroup" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "targetUri" : {
          "type" : "string",
          "description" : "[DEPRECATED] The target URI of the remote process group. If target uri is not set, but uris are set, then returns the first uri in the uris. If neither target uri nor uris are set, then returns null."
        },
        "targetUris" : {
          "type" : "string",
          "description" : "The target URIs of the remote process group. If target uris is not set but target uri is set, then returns the single target uri. If neither target uris nor target uri is set, then returns null."
        },
        "communicationsTimeout" : {
          "type" : "string",
          "description" : "The time period used for the timeout when communicating with the target."
        },
        "yieldDuration" : {
          "type" : "string",
          "description" : "When yielding, this amount of time must elapse before the remote process group is scheduled again."
        },
        "transportProtocol" : {
          "type" : "string",
          "description" : "The Transport Protocol that is used for Site-to-Site communications",
          "enum" : [ "RAW", "HTTP" ]
        },
        "localNetworkInterface" : {
          "type" : "string",
          "description" : "The local network interface to send/receive data. If not specified, any local address is used. If clustered, all nodes must have an interface with this identifier."
        },
        "proxyHost" : {
          "type" : "string"
        },
        "proxyPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "proxyUser" : {
          "type" : "string"
        },
        "inputPorts" : {
          "type" : "array",
          "description" : "A Set of Input Ports that can be connected to, in order to send data to the remote NiFi instance",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedRemoteGroupPort"
          }
        },
        "outputPorts" : {
          "type" : "array",
          "description" : "A Set of Output Ports that can be connected to, in order to pull data from the remote NiFi instance",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedRemoteGroupPort"
          }
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    }
  }
}