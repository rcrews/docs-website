/**
 * Alias URL Lambda@Edge function for the {@link https://docs.cloudera.com/|Cloudera docs homepage}.
 *
 * Using patterns, it aliases URLs
 * <ul>
 * <li>from URLs with "/latest/" to actual latest</li>
 * <li>that end with "/" to "/index.html"</li>
 * <li>that have been replaced by content elsewhere on the site</li>
 * </ul>
 *
 * Function is generated by the script at
 * {@link https://github.infra.cloudera.com/cloudera-docs/docs-website/blob/master/_utils/lambdas/dcc-url-aliases.rb|_utils/dcc-url-aliases.rb}
 * and
 * {@link https://github.infra.cloudera.com/cloudera-docs/docs-website/blob/master/_utils/lambdas/dcc-url-aliases.erb|_utils/dcc-url-aliases.erb}
 * that formats data from
 * {@link https://github.infra.cloudera.com/cloudera-docs/docs-website/blob/master/_utils/lambdas/dcc-url-aliases.yml|_utils/dcc-url-aliases.yml}.
 * Run the script from the <tt>_utils/lambdas</tt> directory.
 *
 * When deploying, attach to a "viewer request" CloudFront event.
 *
 * @author Robert Crews [rcrews@cloudera.com]
 * @param {Object} event - Information from the invoker.
 * @param {Object} context - Information about the invocation environment.
 * @see {@link https://stackoverflow.com/questions/49101162/cloudfront-url-rewriting-remapping-so-content-has-two-urls|Cloudfront URL rewriting/remapping so content has two URLs?}
 * @see {@link https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html|AWS Lambda function handler in Node.js}
 * @see {@link https://docs.aws.amazon.com/lambda/latest/dg/nodejs-context.html|AWS Lambda context object in Node.js}
 * @see {@link https://aws.amazon.com/blogs/networking-and-content-delivery/handling-redirectsedge-part1/|Handling Redirects@Edge Part 1}
 * @see {@link https://aws.amazon.com/blogs/compute/implementing-default-directory-indexes-in-amazon-s3-backed-amazon-cloudfront-origins-using-lambdaedge/|Implementing Default Directory Indexes in Amazon S3-backed Amazon CloudFront Origins Using Lambda@Edge}
 * @see {@link https://aws.amazon.com/blogs/networking-and-content-delivery/lambdaedge-design-best-practices/|Lambda@Edge Design Best Practices}
 */
exports.handler = (event, context, callback) => {
  'use strict'
  const request = event.Records[0].cf.request
  request.uri = request.uri
<% @aliases.each do |a| %>
      .replace('<%= a["alias"] %>',
          '<%= a["exist"] %>')
<% end %>
      .replace(/\/$/, '/index.html')
    return callback(null, request)
}
